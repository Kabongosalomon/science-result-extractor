section: title
Natural Language Inference with Hierarchical BiLSTM Max Pooling Architecture
section: abstract
Recurrent neural networks have proven to be very effective for natural language inference tasks. We build on top of one such model, namely BiLSTM with max pooling, and show that adding a hierarchy of BiLSTM and max pooling layers yields state of the art results for the SNLI sentence encoding-based models and the SciTail dataset, as well as provides strong results for the MultiNLI dataset. We also show that our sentence embeddings can be utilized in a wide variety of transfer learning tasks, outperforming InferSent on 7 out of 10 and SkipThought on 8 out of 9 SentEval sentence embedding evaluation tasks. Furthermore, our model beats the InferSent model in 8 out of 10 recently published SentEval probing tasks designed to evaluate sentence embeddings' ability to capture some of the important linguistic properties of sentences.
section: Introduction
Neural networks have been shown to provide a powerful tool for building representations of natural language on multiple levels of abstraction. Perhaps the most widely used representations in natural language processing are word embeddings (e.g.. Recently there has been a growing interest in models for sentence-level representations using neural networks. Sentence embeddings are distributed representations of natural language sentences with the intention to encode the meaning of the sentences in a neural network representation. Sentence embeddings have been generated using unsupervised learning approaches (e.g., and supervised learning (e.g..
Sentence-level representations have shown promise in multiple different NLP tasks. One prominent example is natural language inference. Natural language inference (NLI) is the task of determining the inferential relationship between two or more sentences. That is, given two sentences, the premise p and the hypothesis h, the task is to determine whether h is entailed by p, whether the sentences are in contradiction with each other or whether they are neutral. There are two main approaches to NLI utilizing neural networks. Some approaches focus on building sentence embeddings for the premises and the hypothesis separately and then combine those using a classifier (e.g.). Other approaches do not treat the two sentences separately but utilize e.g. crosssentence attention (.
In this paper we focus on the sentence embedding approach. Motivated by the success of the architecture of InferSent (, we build a hierarchical architecture utilizing bidirectional LSTM (BiLSTM) layers and max pooling. All in all, our model in on par with the state of the art for Stanford Natural Language Inference corpus (SNLI)) sentence encoding-based models and improves the previous state of the art for SciTail (). We also achieve strong results for the Multi-Genre Natural Language Inference corpus (MultiNLI) (.
We also test our model on a number of transfer learning tasks using the SentEval testing library (, and show that our model outperforms the InferSent model on 7 out of 10 and SkipThought on 8 out of 9 tasks, comparing to the scores reported by. Moreover, our model outperforms the InferSent model in 8 out of 10 recently published SentEval probing tasks designed to evaluate sentence embeddings' ability to capture some of the important linguistic properties of sentences (. This highlights the generalization capability of our proposed model, confirming that the proposed architecture is able to produce sentence embeddings with strong performance across a wide variety of different NLP tasks.
section: Related Work
Sentence embeddings have been utilized in a wide variety of approaches to natural language inference.) explore RNN and LSTM architectures, convolutional neural networks and GRUs, to name a few. The basic idea behind these approaches is to encode the premise and hypothesis sentences separately and then combine those using a neural network classifier. explore multiple different sentence embedding architectures ranging from LSTM, BiLSTM and intra-attention to convolution neural networks and the performance of these architectures on NLI tasks. They show that out of these models BiLSTM with max pooling achieves the strongest results in NLI. They also show that their model trained on NLI data achieves strong performance on various transfer learning tasks.
Although sentence embedding approaches have shown their effectiveness in NLI, there are multiple studies showing that treating the hypothesis and premise sentences together and focusing on the relationship between those sentences yields better results (e.g.). However, as these methods are focused on the inference relations rather than the internal semantics of the sentences, they cannot as straightforwardly be used outside of the NLI context and do not offer similar insights about the sentence level semantics, as sentence embeddings do. By choosing a sentence embedding-based architecture we can more easily use the models in a wide variety of NLP tasks requiring sentence-level semantic information.
section: Model Architecture
Our proposed architecture follows a sentence embedding-based approach for NLI introduced by. The model illustrated in contains sentence embeddings for the two input sentences, where the output of the sentence embeddings are combined using a heuristic introduced by, putting together the concatenation (u, v), absolute element-wise difference |u − v|, and element-wise product u * v. The combined vector is then passed onto a 3-layered multi-layer perceptron (MLP) with a 3-way softmax classifier. The first two layers of the MLP both utilize dropout and a ReLU activation function. We use a variant of ReLU called Leaky ReLU (, defined by:
where we set y = 0.01 as the negative slope for x < 0. This prevents the gradient from dying when x < 0. For the sentence representations we first embed the individual words with pre-trained word embedding. The sequence of the embedded words is then passed onto the sentence encoder which utilizes BiLSTM with max pooling.
Given a sequence T of words (w 1 . . . , w T ), the output of the bi-directional LSTM is a set of vectors (h 1 , . . . , h T ), where each ht ∈ (h 1 , . . . , h T ) is the concatenation
of a forward and backward LSTMs
The max pooling layer produces a vector of the same dimensionality ash t , returning, for each dimension, its maximum value over the hidden units
Motivated by the strong results of the BiLSTM max pooling network by, we experimented with combining BiLSTM max pooling networks as a hierarchical structure. 1 To improve the BiLSTM layers' ability to remember the input words, we let each layer of the stack re-read the input sentence. In our baseline model we stack three BiLSTM max pooling networks as a hierarchical structure, where each BiLSTM reads the input sentence as the input. At each BiLSTM layer except the first one, we initialize the initial hidden state and the cell state with the final state of the previous layer. We take the max value over each dimension of the hidden units for each BiLSTM layer. The final output of the sentence embedding is the concatenation of each of these max pooling layers. Our sentence embedding architecture is visualized in.
section: Experimental Setup
section: Data
We evaluated the sentence embedding architecture with three different natural language inference datasets, including the Stanford Natural Language Inference (SNLI) corpus, the Multi-Genre Natural Language Inference (MultiNLI) corpus and the SciTail dataset. In all our experiments with the three datasets we used only the training data provided in the respective corpus. For the transfer learning tasks, described in Section 7, we used training data from both the SNLI and the MultiNLI datasets in order to compare to the results by.
section: SNLI
The Stanford Natural Language Inference (SNLI) corpus) is a dataset of 570k human-written sentence pairs manually labeled with entailment, contradiction, and neutral. The dataset is divided into training (550,152 pairs), development (10,000 pairs) and test sets (10,000 pairs). The source for the premise sentences in SNLI were image captions taken from the Flickr30k corpus ().
section: MultiNLI
The Multi-Genre Natural Language Inference (MultiNLI) corpus) is a broad-coverage corpus for natural language inference, consisting of 433k human-written sentence pairs labeled with entailment, contradiction and neutral. Unlike the SNLI corpus, which draws the premise sentence from image captions, MultiNLI consists of sentence pairs from ten distinct genres of both written and spoken English. The dataset is divided into training (392,702 pairs), development (20,000 pairs) and test sets (20,000 pairs).
All of the genres are included in the test and development sets, but only five are included in the training set. The development and test datasets have been divided into matched and mismatched, where the former includes only sentences from the same genres as the training data, and the latter includes sentences from the remaining genres not present in the training data.
In addition to the training, development and test sets, MultiNLI provides a smaller annotation dataset, which contains approximately 1000 sentence pairs annotated with linguistic properties of the sentences and is split between the matched and mismatched datasets. This annotation dataset provides a simple way to assess what kind of sentence pairs an NLI system is able to predict correctly and where it makes errors.
section: SciTail
The SciTail dataset () is an NLI dataset created from multiple-choice science exams consisting of 27k sentence pairs. Each question and the correct answer choice have been converted into an assertive statement to form the hypothesis. The dataset is divided into training (23,596 pairs), development (1,304 pairs) and test sets (2,126 pairs). Unlike the SNLI and MultiNLI datasets, SciTail uses only two labels: entailment and neutral.
section: Training Details
The architecture was implemented using PyTorch. We have published our code in GitHub: https: //github.com/Helsinki-NLP/HBMP.
For all of our models we used a gradient descent optimization algorithm based on the Adam update rule, which is preimplemented in PyTorch. We used a learning rate of 5e-4 for all our models. The learning rate was decreased by the factor of 0.2 after each epoch if the model did not improve. We used a batch size of 64. The models were evaluated with the development data after each epoch and training was stopped if the development loss increased for more than 3 epochs. The model with the highest development accuracy was selected for testing.
We use pre-trained GloVe word embeddings of size 300 dimensions (GloVe 840B 300D)), which were fine-tuned during training. The sentence embeddings have hidden dimensionality of 600 for both direction (except for SentEval test, where we test models with 600D and 1200D per direction) and the 3-layer multi-layer perceptron (MLP) have the size of 600 dimensions. We use a dropout of 0.1 in the BiL-STM layers and between the MLP layers (except just before the final layer).
All our models were trained using one NVIDIA Tesla P100 GPU.
section: Experimental Results
The proposed architecture provides strong results on all of the three datasets. We achieve the new state of the art for SciTail 86.0%. On SNLI our results are on par with the current state of the art 86.6%. On MultiNLI our model provides strong results on both the matched and mismatched test sets.
section: SNLI
For for the SNLI corpus our model provides the test accuracy of 86.6% after 4 epochs of training, which is on par with the previously published state of the art for sentence embedding approaches using BiLSTM and generalized pooling. However, our model requires less trainable parameters than Chen et al.'s model (32m vs 65m). Comparison of our results with the previous state of the art and selected other sentence embedding based results are reported in.
section: Model
section: MultiNLI
For the MultiNLI matched test set (MultiNLI-m) our model achieves a test accuracy of 73.7% after 3 epochs of training, which is 0.8% points lower than the state of the art 74.5% by. For the mismatched test set (MultiNLImm) our model achieves a test accuracy of 73.0% after 3 epochs of training, which is 0.6% points lower than the state of the art 73.6% by. Comparison of our results with the previous state of the art and selected sentence embedding based results are reported in.
Although we did not achieve state of the art results for the MultiNLI dataset, we believe that a systematic study of different hierarchical BiLSTM max pooling structures could reveal an architecture providing the needed improvement.
section: SciTail
On the SciTail dataset we compared our model against non-sentence embedding-based models, as no results have been previously published which are based only on sentence embeddings. For this reason we also implemented the basic LSTM (using the last hidden state as the output) and BiL-STM with max pooling models and tested them on the SciTail dataset.
For SciTail we obtain a test score of 86.0% after 4 epochs of training, which is +2.7% points abso-   lute improvement on the previous state of the art by. The results achieved by our proposed model are significantly higher than the previously published results. It has been argued that the lexical similarity of the sentences in SciTail sentence pairs make it a particularly difficult dataset (. We hypothesize that our model is indeed better at identifying entailment relations beyond focusing on the lexical similarity or difference of the sentences.
section: Error Analysis
To understand better what kind of inferential relationships our model is able to identify, we conducted an error analysis for the three datasets. We report the results below. We also conducted a linguistic error analysis and compared our results to the results obtained with the InferSent BiLSTM max pooling model of (our implementation). 4 For more detailed error statistics, seethe appendix. The scores for our implementation of InferSent are on par or slightly higher than the scores reported by using their training setup.
section: SNLI
On the SNLI dataset our model makes the least errors on sentence pairs labeled with entailment, having an accuracy of: 90.5%. The model is also almost effective in predicting contradictions, with an accuracy of 87.7%. Our model is less effective in recognizing correctly sentence pairs labeled with neutral, having an accuracy of 81.5%.
section: MultiNLI
As the labeled test data is not openly available for MultiNLI, we analyzed the error statistics for this dataset based on the development data. For the matched dataset (MultiNLI-m) our model had a development accuracy of 73.2%. On this dataset our model makes fewer errors on sentence pairs labeled as entailment, having an accuracy of 75.4% compared to pairs with label contradiction, where the accuracy was 73.1% and neu- tral, where the accuracy was 70.8%. lists the prediction accuracies per each gold label and compares the results to InferSent results. For the mismatched dataset (MultiNLI-mm) our model had a development accuracy of 74.2%. On this dataset our model makes significantly fewer errors on sentence pairs labeled as entailment, having an accuracy of 80.3% compared to pairs with label contradiction, where the accuracy was 72.7% and neutral, where the accuracy was just 69.0%. summarizes the prediction accuracies per each gold label and compares the results to InferSent results.
We also conducted additional linguistic error analysis using the annotation test set provided for MultiNLI. The results are reported in the appendix and they are mostly inconclusive.
section: Label
section: SciTail
For SciTail, unlike for the SNLI and both of the MultiNLI datasets, our model makes more errors on sentence pairs labeled as entailment, having an accuracy of 75.1% compared to pairs marked with neutral, where the accuracy was 93.1%.
section: Transfer Learning
To better understand how well our model generalizes to different tasks, we conducted additional transfer learning tests using the SentEval sentence embedding evaluation library 5 () and compared our results to the results published for InferSent and SkipThought (. For the transfer learning tasks, we trained our model on NLI data consisting of the concatenation of the SNLI and MultiNLI training sets consisting of 942,854 sentence pairs in total. This allows us to compare our results to the InferSent results which were obtained using a model trained on the same data (. have shown that including all the training data from SNLI and MultiNLI improves significantly the model performance on transfer learning tasks, compared to training the model only on SNLI data. For training the model we used the same setup as described above in Section 4.
We used the SentEval sentence embedding evaluation library using the default settings 6 recommended on the SentEval website, with a logistic regression classifier, Adam optimizer with learning rate of 0.001, batch size of 64 and epoch size of 4. lists the transfer learning results for our models with 1200D and 2400D hidden dimensionality and compares our model to the InferSent and SkipThought scores reported by. The downstream datasets included in the tests were MR movie reviews, CR product reviews, SUBJ subjectivity status, MPQA opinionpolarity, SST binary sentiment analysis, TREC question-type classification, MRPC paraphrase detection, SICK-Relatedness (SICK-R) semantic textual similarity, SICK-Entailment (SICK-E) natural language inference and STS14 semantic textual similarity.
Our 2400D model outperforms the InferSent model on 7 out of 10 tasks. The model achieves higher score on 8 out of 9 tasks reported for SkipThought, having equal score on the SUBJ dataset. No MRPC results have been reported for SkipThought.
To study in more detail the linguistic properties The SentEval test suite for evaluating sentence embeddings is available online at https://github.com/ facebookresearch/SentEval. Refer to the SentEval website for details about the different settings:
https://github.com/ facebookresearch/SentEval.
section: Model
section: MR CR SUBJ MPQA SST TREC MRPC SICK-R SICK-E STS14
section: Conclusion
In this paper we have introduced an architecture based on BiLSTM max pooling, that achieves on par results with the current state of the art for SNLI sentence encoding-based models and anew state of the art score for SciTail.
We furthermore tested our model using the SentEval sentence embedding evaluation library, showing that our model achieves great generalization capability, outperforming InferSent on 7 out of 10 downstream and 8 out of 10 probing tasks, and SkipThought on 8 out of 9 downstream tasks. Our model also achieves a strong result on the Breaking NLI dataset outperforming Infersent on 11 out of 14 lexical categories.
The success of the proposed hierarchical architecture raises a number of additional interesting questions. First, it would be important to understand what kind of semantic information the different layers are able to capture. Second, a detailed and systematic comparison of different hierarchical architecture configurations, combining BiLSTM and max pooling in different ways, could lead to even stronger results, as indicated by the results we obtained on the SciTail dataset with the modified 4-layered model. Also, as the sentence embedding approaches for NLI focus mostly on the sentence encoder, we think that more should be done to study the classifier part of the overall NLI architecture. There is not enough research on classifiers for NLI and we hypothesize that further improvements can be achieved by a systematic study of different classifier architectures, starting from the way the two sentence embeddings are combined before passing onto the classifier. This is also something we intend to undertake as a next step.
Finally, there are number of other NLP tasks, including neural machine translation (NMT), where HBMP models should be evaluated. We plan to evaluate the performance of the HBMP encoder in other NLP tasks like on encoder-decoder NMT models in the future.
section: References
section: A Detailed Error Statistics for the HBMP model
To see in more detail how our HBMP model is able to classify sentence pairs with different gold labels and what kind of errors it makes, we summarize error statistics as confusion matrices for the different datasets.     The confusion matrices highlight the HBMP model's strong performance across all the labels. However, the accuracy for neutral in the SNLI and MultiNLI datasets is clearly lower than for the other two labels.
section: B Linguistic Error Analysis
We also conducted a linguistic error analysis for the HBMP model using the MultiNLI annotation set. We compare our model and the type of linguistic reasoning it is capable of to InferSent BiL-STM max pooling model (, in order to see what benefits are achieved by adding a hierarchical BiLSTM max pooling structure on top of the basic BiLSTM max pooling architecture. We provide a detailed comparison of the prediction accuracies of our HBMP model with InferSent with respect to the type of linguistic properties present in the sentence pairs. contains the comparison for MultiNLI-m dataset and for MultiNLI-mm dataset.
The analysis show that our HBMP model outperforms InferSent in some of the categories, but the results are mostly at this point inconclusive.
section: C Additional tests with the Breaking NLI dataset
We conducted additional testing of the proposed sentence embedding architecture using the Breaking NLI test set recently published by. The test set is designed to highlight   the lack of lexical reasoning capability of NLI systems.
We trained our HBMP model and the InferSent model using the SNLI training data. We compare our results with the results published by and to results obtained with InferSent sentence encoder (our implementation).
Our HBMP model outperforms the InferSent model in 7 out of 14 categories, receiving an overall score of 65.1% (InferSent: 65.6%). Our model also compares well against the other models, outperforming Decomposable Attention model (51.90%) ( and Residual Encoders (62.20%)) in the overall score. As these models are not based purely on sentence embeddings, the obtained result highlights that sentence embedding approaches can be competitive when handling inferences requiring lexical information. Our model is still outperformed by and ESIM) and KIM, an ESIM model incorporating external knowledge. The results of the comparison are summarized in. InferSent results obtained with our implementation using the architecture and training set-up described in (). Scores highlighted with bold are top scores when comparing the InferSent and our HBMP model.
