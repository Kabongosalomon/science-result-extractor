section: title
Classifying Relations by Ranking with Convolutional Neural Networks
section: abstract
Relation classification is an important semantic processing task for which state-of-the-art systems still rely on costly hand-crafted features. In this work we tackle the relation classification task using a convo-lutional neural network that performs classification by ranking (CR-CNN). We propose anew pairwise ranking loss function that makes it easy to reduce the impact of artificial classes. We perform experiments using the the SemEval-2010 Task 8 dataset, which is designed for the task of classifying the relationship between two nominals marked in a sentence. Using CR-CNN, we outperform the state-of-the-art for this dataset and achieve a F1 of 84.1 without using any costly handcrafted features. Additionally, our experimental results show that: (1) our approach is more effective than CNN followed by a soft-max classifier; (2) omitting the representation of the artificial class Other improves both precision and recall; and (3) using only word embeddings as input features is enough to achieve state-of-the-art results if we consider only the text between the two target nominals.
section: Introduction
Relation classification is an important Natural Language Processing (NLP) task which is normally used as an intermediate step in many complex NLP applications such as question-answering and automatic knowledge base construction. Since the last decade there has been increasing interest in applying machine learning approaches to this task. One reason is the availability of benchmark datasets such as the task 8 dataset (, which encodes the task of classifying the relationship between two nominals marked in a sentence. The following sentence contains an example of the Component-Whole relation between the nominals "introduction" and "book". Some recent work on relation classification has focused on the use of deep neural networks with the aim of reducing the number of handcrafted features (). However, in order to achieve state-ofthe-art results these approaches still use some features derived from lexical resources such as WordNet or NLP tools such as dependency parsers and named entity recognizers.
In this work, we propose anew convolutional neural network (CNN), which we name Classification by Ranking CNN (CR-CNN), to tackle the relation classification task. The proposed network learns a distributed vector representation for each relation class. Given an input text segment, the network uses a convolutional layer to produce a distributed vector representation of the text and compares it to the class representations in order to produce a score for each class. We propose anew pairwise ranking loss function that makes it easy to reduce the impact of artificial classes. We perform an extensive number of experiments using the the SemEval-2010 Task 8 dataset. Using CR-CNN, and without the need for any costly handcrafted feature, we outperform the state-of-the-art for this dataset. Our experimental results are evidence that: (1) CR-CNN is more effective than CNN followed by a softmax classifier; (2) omitting the representation of the artificial class Other improves both precision and recall; and (3) using only word embeddings as input features is enough to achieve state-of-the-art results if we consider only the text between the two target nominals.
The remainder of the paper is structured as follows. Section 2 details the proposed neural network. In Section 3, we present details about the setup of experimental evaluation, and then describe the results in Section 4. In Section 5, we discuss previous work in deep neural networks for relation classification and for other NLP tasks. Section 6 presents our conclusions.
section: The Proposed Neural Network
Given a sentence x and two target nouns, CR-CNN computes a score for each relation class c ∈ C. For each class c ∈ C, the network learns a distributed vector representation which is encoded as a column in the class embedding matrix W classes . As detailed in, the only input for the network is the tokenized text string of the sentence. In the first step, CR-CNN transforms words into realvalued feature vectors. Next, a convolutional layer is used to construct a distributed vector representations of the sentence, r x . Finally, CR-CNN computes a score for each relation class c ∈ C by performing a dot product between r x and W classes .
section: Word Embeddings
The first layer of the network transforms words into representations that capture syntactic and semantic information about the words. Given a sentence x consisting of N words x = {w 1 , w 2 , ..., w N }, every word w n is converted into a real-valued vector r wn . Therefore, the input to the next layer is a sequence of real-valued vectors emb x = {r w 1 , r w 2 , ..., r w N } Word representations are encoded by column vectors in an embedding matrix W wrd ∈ Rd w ×|V | , where V is a fixed-sized vocabulary. Each column W wrd i ∈ Rd w corresponds to the word embedding of the i-th word in the vocabulary. We transform a word w into its word embedding r w by using the matrix-vector product:
where v w is a vector of size |V | which has value 1 at index wand zero in all other positions. The matrix W wrd is a parameter to be learned, and the size of the word embedding d w is a hyperparameter to be chosen by the user.
section: Word Position Embeddings
In the task of relation classification, information that is needed to determine the class of a relation between two target nouns normally comes from words which are close to the target nouns. propose the use of word position embeddings (position features) which help the CNN by keeping track of how close words are to the target nouns. These features are similar to the position features proposed by for the Semantic Role Labeling task.
In this work we also experiment with the word position embeddings (WPE) proposed by. The WPE is derived from the relative distances of the current word to the target noun 1 and noun 2 . For instance, in the sentence shown in, the relative distances of left to car and plant are -1 and 2, respectively. As in), each relative distance is mapped to a vector of dimension d wpe , which is initialized with random numbers. d wpe is a hyperparameter of the network. Given the vectors wp 1 and wp 2 for the word w with respect to the targets noun 1 and noun 2 , the position embedding of w is given by the concatenation of these two vectors, wpe w = [wp 1 , wp 2 ].
In the experiments where word position embeddings are used, the word embedding and the word position embedding of each word are concatenated to form the input for the convolutional layer, emb x = {[r w 1 , wpe w 1 ], [r w 2 , wpe w 2 ], ..., [r w N , wpe w N ]}.
section: Sentence Representation
The next step in the NN consists in creating the distributed vector representation r x for the input sentence x. The main challenges in this step are the sentence size variability and the fact that important information can appear at any position in the sentence. In recent work, convolutional approaches have been used to tackle these issues when creating representations for text segments of different sizes () and characterlevel representations of words of different sizes (dos). Here, we use a convolutional layer to compute distributed vector representations of the sentence. The convolutional layer first produces local features around each word in the sentence. Then, it combines these local features using a max operation to create a fixed-sized vector for the input sentence.
Given a sentence x, the convolutional layer applies a matrix-vector operation to each window of size k of successive windows in emb x = {r w 1 , r w 2 , ..., r w N }. Let us define the vector z n ∈ Rd wk as the concatenation of a sequence of k word embeddings, centralized in the n-th word:
In order to overcome the issue of referencing words with indices outside of the sentence boundaries, we augment the sentence with a special padding token replicated k − 1 2 times at the beginning and the end.
The convolutional layer computes the j-th element of the vector r x ∈ Rd c as follows:
is the weight matrix of the convolutional layer and f is the hyperbolic tangent function. The same matrix is used to extract local features around each word window of the given sentence. The fixed-sized distributed vector representation for the sentence is obtained by using the max overall word windows. Matrix W 1 and vector b 1 are parameters to be learned. The number of convolutional units dc , and the size of the word context window k are hyperparameters to be chosen by the user. It is important to note that dc corresponds to the size of the sentence representation.
section: Class embeddings and Scoring
Given the distributed vector representation of the input sentence x, the network with parameter set θ computes the score fora class label c ∈ C by using the dot product
where W classes is an embedding matrix whose columns encode the distributed vector representations of the different class labels, and [W classes ] c is the column vector that contains the embedding of the class c. Note that the number of dimensions in each class embedding must be equal to the size of the sentence representation, which is defined by dc . The embedding matrix W classes is a parameter to be learned by the network. It is initialized by randomly sampling each value from an uniform distribution: U (−r, r), where r = 6 |C| + dc .
section: Training Procedure
Our network is trained by minimizing a pairwise ranking loss function over the training set D. The input for each training round is a sentence x and two different class labels y + ∈ C and c − ∈ C, where y + is a correct class label for x and c − is not. Let s θ (x) y + and s θ (x) c − be respectively the scores for class labels y + and c − generated by the network with parameter set θ. We propose anew logistic loss function over these scores in order to train CR-CNN:
where m + and m − are margins and γ is a scaling factor that magnifies the difference between the score and the margin and helps to penalize more on the prediction errors. The first term in the right side of Equation 1 decreases as the score s θ (x) y + increases. The second term in the right side decreases as the score s θ (x) c − decreases. Training CR-CNN by minimizing the loss function in Equation 1 has the effect of training to give scores greater than m + for the correct class and (negative) scores smaller than −m − for incorrect classes. In our experiments we set γ to 2, m + to 2.5 and m − to 0.5. We use L2 regularization by adding the term βθ 2 to Equation 1. In our experiments we set β to 0.001. We use stochastic gradient descent (SGD) to minimize the loss function with respect to θ.
Like some other ranking approaches that only update two classes/examples at every training round), we can efficiently train the network for tasks which have a very large number of classes. This is an advantage over softmax classifiers.
On the other hand, sampling informative negative classes/examples can have a significant impact in the effectiveness of the learned model. In the case of our loss function, more informative negative classes are the ones with a score larger than −m − . The number of classes in the relation classification dataset that we use in our experiments is small. Therefore, in our experiments, given a sentence x with class label y + , the incorrect class c − that we choose to perform a SGD step is the one with the highest score among all incorrect classes c − = arg max
For tasks where the number of classes is large, we can fix a number of negative classes to be considered at each example and select the one with the largest score to perform a gradient step. This approach is similar to the one used by to select negative examples.
We use the backpropagation algorithm to compute gradients of the network. In our experiments, we implement the CR-CNN architecture and the backpropagation algorithm using Theano ().
section: Special Treatment of Artificial Classes
In this work, we consider a class as artificial if it is used to group items that do not belong to any of the actual classes. An example of artificial class is the class Other in the SemEval 2010 relation classification task. In this task, the artificial class Other is used to indicate that the relation between two nominals does not belong to any of the nine relation classes of interest. Therefore, the class Other is very noisy since it groups many different types of relations that may not have much in common.
An important characteristic of CR-CNN is that it makes it easy to reduce the effect of artificial classes by omitting their embeddings. If the embedding of a class label c is omitted, it means that the embedding matrix W classes does not contain a column vector for c. One of the main benefits from this strategy is that the learning process focuses on the "natural" classes only. Since the embedding of the artificial class is omitted, it will not influence the prediction step, i.e., CR-CNN does not produce a score for the artificial class.
In our experiments with the SemEval-2010 relation classification task, when training with a sentence x whose class label y = Other, the first term in the right side of Equation 1 is set to zero. During prediction time, a relation is classified as Other only if all actual classes have negative scores. Otherwise, it is classified with the class which has the largest score.
section: Experimental Setup
section: Dataset and Evaluation Metric
We use the SemEval-2010 Task 8 dataset to perform our experiments. This dataset contains 10,717 examples annotated with 9 different relation types and an artificial relation Other, which is used to indicate that the relation in the example does not belong to any of the nine main relation types. The nine relations are Cause-Effect, Component-Whole, Content-Container, EntityDestination, Entity-Origin, Instrument-Agency, Member-Collection, Message-Topic and ProductProducer. Each example contains a sentence marked with two nominals e 1 and e 2 , and the task consists of predicting the relation between the two nominals taking into consideration the directionality. That means that the relation CauseEffect(e1,e2) is different from the relation CauseEffect(e2,e1), as shown in the examples below. More information about this dataset can be found in ( The SemEval-2010 Task 8 dataset is already partitioned into 8,000 training instances and 2,717 test instances. We score our systems by using the SemEval-2010 Task 8 official scorer, which computes the macro-averaged F1-scores for the nine actual relations (excluding Other) and takes the directionality into consideration.
section: Word Embeddings Initialization
The word embeddings used in our experiments are initialized by means of unsupervised pre-training. We perform pre-training using the skip-gram NN architecture () available in the word2vec tool. We use the December 2013 snapshot of the English Wikipedia corpus to train word embeddings with word2vec. We preprocess the Wikipedia text using the steps described in (dos Santos and Gatti, 2014): (1) removal of paragraphs that are not in English; (2) substitution of non-western characters fora special character; (3) tokenization of the text using the tokenizer available with the Stanford POS Tagger (); (4) removal of sentences that are less than 20 characters long (including white spaces) or have less than 5 tokens. (5) lowercase all words and substitute each numerical digit by a 0. The resulting clean corpus contains about 1.75 billion tokens.
section: Neural Network Hyper-parameter
We use 4-fold cross-validation to tune the neural network hyperparameters. Learning rates in the range of 0.03 and 0.01 give relatively similar results. Best results are achieved using between 10 and 15 training epochs, depending on the CR-CNN configuration. In
section: Experimental Results
section: Word Position Embeddings and Input Text Span
In the experiments discussed in this section we assess the impact of using word position embeddings (WPE) and also propose a simpler alternative approach that is almost as effective as WPEs. The main idea behind the use of WPEs in relation classification task is to give some hint to the convolutional layer of how close a word is to the target nouns, based on the assumption that closer words have more impact than distant words.
Here we hypothesize that most of the information needed to classify the relation appear between the two target nouns. Based on this hypothesis, we perform an experiment where the input for the convolutional layer consists of the word embeddings of the word sequence {w e 1 − 1, ..., we 2 + 1} where e 1 and e 2 correspond to the positions of the first and the second target nouns, respectively.
In we compare the results of different CR-CNN configurations. The first column indicates whether the full sentence was used (Yes) or whether the text span between the target nouns was used (No). The second column informs if the WPEs were used or not. It is clear that the use of WPEs is essential when the full sentence is used, since F1 jumps from 74.3 to 84.1. This effect of WPEs is reported by). On the other hand, when using only the text span between the target nouns, the impact of WPE is much smaller. With this strategy, we achieve a F1 of 82.8 using only word embeddings as input, which is a result as good as the previous state-of-the-art F1 of 83.0 reported in () for the SemEval-2010 Task 8 dataset. This experimental result also suggests that, in this task, the CNN works better for short texts.
All experiments reported in the next sections use CR-CNN with full sentence and WPEs.
section: Full
section: Impact of Omitting the Embedding of the artificial class Other
In this experiment we assess the impact of omitting the embedding of the class Other. As we mentioned above, this class is very noisy since it groups many different infrequent relation types. Its embedding is difficult to define and therefore brings noise into the classification process of the natural classes. In we present the results comparing the use and omission of embedding for the class Other. The two first lines of results present the official F1, which does not take into account the results for the class Other. We can see that by omitting the embedding of the class Other both precision and recall for the other classes improve, which results in an increase of 1.4 in the F1. These results suggest that the strategy we use in CR-CNN to avoid the noise of artificial classes is effective.: Impact of not using an embedding for the artificial class Other.
In the two last lines of we present the results for the class Other. We can note that while the recall for the cases classified as Other remains 48.7, the precision significantly decreases from 60.1 to 52.0 when the embedding of the class Other is not used. That means that more cases from natural classes (all) are now been classified as Other. However, as both the precision and the recall of the natural classes increase, the cases that are now classified as Other must be cases that are also wrongly classified when the embedding of the class Other is used.
section: CR-CNN versus CNN+Softmax
In this section we report experimental results comparing CR-CNN with CNN+Softmax. In order to do a fair comparison, we've implemented a CNN+Softmax and trained it with the same data, word embeddings and WPEs used in CR-CNN. Concretely, our CNN+Softmax consists in getting the output of the convolutional layer, which is the vector r x in, and giving it as input fora softmax classifier. We tune the parameters of CNN+Softmax by using a 4-fold cross-validation with the training set. Compared to the hyperparameter values for CR-CNN presented in, the only difference for CNN+Softmax is the number of convolutional units dc , which is set to 400.
In we compare the results of CR-CNN and CNN+Softmax. CR-CNN outperforms CNN+Softmax in both precision and recall, and improves the F1 by 1.6. The third line in shows the result reported by when only word embeddings and WPEs are used as input to the network (similar to our CNN+Softmax). We believe that the word embeddings employed by them is the main reason their result is much worse than that of CNN+Softmax. We use word embeddings of size 400 while they use word embeddings of size 50, which were trained using much less unlabeled data than we did.
Neural Net.
Prec
section: Comparison with the State-of-the-art
In we compare CR-CNN results with results recently published for the SemEval-2010 Task 8 dataset. present a support vector machine (SVM) classifier that is fed with a rich (traditional) feature set. It obtains an F1 of 82.2, which was the best result at SemEval-2010 Task 8. present results fora recursive neural network (RNN) that employs a matrix-vector representation to every node in a parse tree in order to compose the distributed vector representation for the complete sentence. Their method is named the matrix-vector recursive neural network (MVRNN) and achieves a F1 of 82.4 when POS, NER and WordNet features are used. In, the authors present results fora CNN+Softmax classifier which employs lexical and sentencelevel features. Their classifier achieves a F1 of 82.7 when adding a handcrafted feature based on the WordNet. present the Factor-based Compositional Embedding Model (FCM), which achieves a F1 of 83.0 by deriving sentencelevel and substructure embeddings from word embeddings utilizing dependency trees and named entities.
As we can see in the last line of, CR-CNN using the full sentence, word embeddings and WPEs outperforms all previous reported results and reaches anew state-of-the-art F1 of 84.1. This is a remarkable result since we do not use any complicated features that depend on external lexical resources such as WordNet and NLP tools such as named entity recognizers (NERs) and dependency parsers.
We can see in that CR-CNN 1 also achieves the best result among the systems that use word embeddings as the only input features. The closest result (80.6), which is produced by the FCM system of, is 2.2 F1 points behind CR-CNN result (82.8).
section: Most Representative Trigrams for each Relation
In, for each relation type we present the five trigrams in the test set which contributed the most for scoring correctly classified examples.
Remember that in CR-CNN, given a sentence x the score for the class c is computed by s θ (x) c = r x [W classes ] c . In order to compute the most representative trigram of a sentence x, we trace back each position in r x to find the trigram responsible for it. For each trigram t, we compute its particular contribution for the score by summing the terms in score that use positions in r x that trace back tot. The most representative trigram in x is the one with the largest contribution to the improvement of the score. In order to create the results presented in, we rank the trigrams which were selected as the most representative of any sentence in decreasing order of contribution value. If a trigram appears as the largest contributor for more than one sentence, its contribuition value becomes the sum of its contribution for each sentence.
We can see in that for most classes, the trigrams that contributed the most to increase the score are indeed very informative regarding the relation type. As expected, different trigrams play an important role depending on the direction of the relation. For instance, the most informative tri-gram for Entity-Origin(e1,e2) is "away from the", while reverse direction of the relation, EntityOrigin(e2,e1) or Origin-Entity, has "the source of" as the most informative trigram. These results area step towards the extraction of meaningful knowledge from models produced by CNNs.
section: Related Work
Over the years, various approaches have been proposed for relation classification). Most of them treat it as a multiclass classification problem and apply a variety of machine learning techniques to the task in order to achieve a high accuracy.
Recently, deep learning (Bengio, 2009) has become an attractive area for multiple applications, including computer vision, speech recognition and natural language processing. Among the different deep learning strategies, convolutional neural networks have been successfully applied to different NLP task such as part-of-speech tagging (dos Santos and Zadrozny, 2014), sentiment analysis, question classification (), semantic role labeling), hashtag prediction (, sentence completion and response matching (.
Some recent work on deep learning for relation classification include, and, the authors tackle relation classification using a recursive neural network (RNN) that assigns a matrix-vector representation to every node in a parse tree. The representation for the complete sentence is computed bottom-up by recursively combining the words according to the syntactic structure of the parse tree Their method is named the matrix-vector recursive neural network (MVRNN). propose an approach for relation classification where sentence-level features are learned through a CNN, which has word embedding and position features as its input. In parallel, lexical features are extracted according to given nouns. Then sentence-level and lexical features are concatenated into a single vector and fed into a softmax classifier for prediction. This approach achieves state-of-the-art performance on the SemEval-2010 Task 8 dataset. propose a Factor-based Com-
section: Classifier
Feature Set F1 SVM POS, prefixes, morphological, WordNet, dependency parse, 82.2 (Rink and Harabagiu, 2010) Levin classes, ProBank, FrameNet, NomLex-Plus, Google n-gram, paraphrases, TextRunner RNN word embeddings 74.8 ( word embeddings, POS, NER, WordNet 77.6 MVRNN word embeddings 79.1 ( word embeddings, POS, NER, WordNet 82.4 word embeddings 69.7 CNN+Softmax word embeddings, word position embeddings, 82.7 ( word pair, words around word pair, WordNet FCM word embeddings 80.6 ( word embeddings, dependency parse, NER 83.0 CR-CNN word embeddings 82.8 word embeddings, word position embeddings 84.1 Cause-Effect e1 resulted in, e1 caused a, had caused e2 caused by, was caused by, are the, poverty cause e2, caused a e2 caused by, been caused by, e2 from e1
Component-Whole e1 of the, of the e2, part of the, e2 's e1, with its e1, e2 has a, in the e2, e1 on the e2 comprises the, e2 with e1
Content-Container was in a, was hidden in, were in a, e2 full of, e2 with e1, e2 was full, was inside a, was contained in e2 contained a, e2 with cold Entity-Destination e1 into the, e1 into a, e1 to the, -was put inside, imported into the Entity-Origin away from the, derived from a, had the source of, e2 grape e1, left the, derived from an, e1 from the e2 butter e1
Instrument-Agency are used by, e1 for e2, is used by, with a e1, by using e1, e2 finds a, trade for e2, with the e2 e2 with a, e2 , who Member-Collection of the e2, in the e2, of this e2, e2 of e1, of wild e1, of elven e1, the political e2, e1 collected in e2 of different, of 0000 e1
Message-Topic e1 is the, e1 asserts the, e1 that the, described in the, discussed in the, on the e2, e1 inform about featured in numerous, discussed in cabinet, documented in two, Product-Producer e1 by the, by a e2, of the e2, e2 of the, e2 has constructed, e2 's e1, by the e2, from the e2 e2 came up, e2 who created: List of most representative trigrams for each relation type.
positional Embedding Model (FCM) by deriving sentence-level and substructure embeddings from word embeddings, utilizing dependency trees and named entities. It achieves slightly higher accuracy on the same dataset than (), but only when syntactic information is used.
There are two main differences between the approach proposed in this paper and the ones proposed in): (1) CR-CNN uses a pair-wise ranking method, while other approaches apply multiclass classification by using the softmax function on the top of the CNN/RNN; and (2) CR-CNN employs an effective method to deal with artificial classes by omitting their embeddings, while other approaches treat all classes equally.
section: Conclusion
In this work we tackle the relation classification task using a CNN that performs classification by ranking. The main contributions of this work are: (1) the definition of anew state-of-the-art for the SemEval-2010 Task 8 dataset without using any costly handcrafted features; (2) the proposal of anew CNN for classification that uses class embeddings and anew rank loss function; (3) an effective method to deal with artificial classes by omitting their embeddings in CR-CNN; (4) the demonstration that using only the text between target nominals is almost as effective as using WPEs; and (5) a method to extract from the CR-CNN model the most representative contexts of each relation type. Although we apply CR-CNN to relation classification, this method can be used for any classification task.
section: 633
