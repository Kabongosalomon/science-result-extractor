section: title
Bidirectional Long Short-Term Memory Networks for Relation Classification
section: abstract
Relation classification is an important semantic processing, which has achieved great attention in recent years. The main challenge is the fact that important information can appear at any position in the sentence. Therefore, we propose bidirec-tional long short-term memory networks (BLSTM) to model the sentence with complete, sequential information about all words. At the same time, we also use features derived from the lexical resources such as WordNet or NLP systems such as dependency parser and named entity rec-ognizers (NER). The experimental results on SemEval-2010 show that BLSTM-based method only with word embeddings as input features is sufficient to achieve state-of-the-art performance, and importing more features could further improve the performance.
section: Introduction
The automatic classification of semantic relations is an important task, which could offer useful information for many applications, such as question answering, information extraction, the construction and completion of semantic or relational knowledge base.
In this work, we focus on the classification of semantic relations between pairs of nominals (. Given a sentence S with annotated pairs of nominal e1 and e2, the task is to classify which of the following nine semantic relations holds between the nominals: Cause-Effect, Instrument-Agency, Product-Producer, ContentContainer, Entity-Origin, Entity-Destination, Component-Whole, Member-Collection, Message-Topic, or Other if it does not belongs to any of the nine annotated relations.
For example, News and commotion are connected in a Cause-Effect relation in the sentence "The news brought about a commotion in the office." In this instance, the relation between news and commotion could be inferred by the meaning of the two nominals and the context of "brought about" around them. Therefore, how to grasp and represent the lexical and context information are the key research points for semantic relation classification.
Supervised methods with carefully handcrafted features from lexical and semantic resources have achieved high performance. However, the selection of features and the effective integration of knowledge sources into relation classification seem to be difficult.
Recently, deep neural networks has been applied with the aim of reducing the number of handcrafted features, and getting effective features from lexical and sentence level.
Different from previous work, we propose bidirectional long short-term memory networks (BLSTM) to solve the relation classification. For every word in a given sentence, BLSTM has complete, sequential information about all words before and after it. Long distance relationship maybe solved in some extent in this networks. At the same time, we also use features derived from the lexical resources such as WordNet or NLP tools such as dependency parser and named entity recognizers (NER). The experimental results show that only using word embedding as input features is enough to achieve state-of-the-art results. Importing more features could further improve the performance of the relation classification. SVM: Using SVM classifier and a number of features derived from NLP tools and many external resources, it achieves the highest performance among the participating systems (10 teams, 28 runs).
Neural network has got great achievement in many applications, it has also been utilized in relation classification as shown in the followings:
MV-RNN (Socher et al., 2012): They propose a recursive neural network model to learn compositional vector representations for phrases and sentences of arbitrary syntactic type and length.
CNN (: Sentence level features are learned using a convolutional model, and concatenated with lexical features to form the final extracted feature vector.
FCM (): They decompose the sentence into substructures, and extract features for each substructure. Finally they combine these features with the embeddings of words in this substructure to form a substructure embedding.
CR-CNN (Santos et al., 2015): They propose network to learn a distributed vector representation for each relation class. A ranking loss function is proposed to reduce the impact of artificial classes.
DepNN (: Using a recursive neural network to model the subtrees, and a convolutional neural network to capture the most important features on the shortest path.
From the above works, we can see that many different neural network models have been applied to solve relation classification recently. The main target is to learn the effective features in lexical and sentence level to represent the latent relation between the given nominals.
Our work has the same target, and we try to apply BLSTM to mine the sentence level features with its advantage of capturing long distance relationship in a sentence. We also study the influence of adding features obtained from NLP tools and resources on the final classification performance.
section: Long Short Term Memory
The Long Short Term Memory architecture was proposed and extended) with the motivation on an analysis of Recurrent Neural Nets (), which found that longtime lags were inaccessible to existing architectures, because backpropagated error either blows up or decays exponentially.
A LSTM layer consists of a set of recurrently connected blocks, known as memory blocks. Each one contains one or more recurrently connected memory cells and three multiplicative units -the input, output and forget gates -that provide continuous analogues of write, read and reset operations for the cells. LSTM has achieved the best known results in handwriting recognition () and speech recognition (). shows one cell of LSTM memory block. More precisely, the input xt to the cells is multiplied by the activation of the input gate, the output to the net is multiplied by that of the output gate, and the previous cell values are multiplied by the forget gate. The net can only interact with the cells via the gates.
The basic idea of bidirectional LSTM is to present each training sequence forwards and backwards to two separate recurrent nets, both of which are connected to the same output layer. This means that for every point in a given sequence, the network has complete, sequential information about all points before and after it. The structure of BLSTM is shown in.
section: Methodology
We propose bidirectional long short-term memory networks (BLSTM) to solve the relation classification. It includes the following parts:
(1) Initial feature extraction: extract from the input sentence. (2) Features embedding: transform all initial features into real-valued vector representation. (3) BLSTM-based sentence level representation: get high level feature representation from step (2). (4) Constructing feature vector: get lexical level and sentence level features from step (2) and step (3), and concatenate them to form the final feature vector. (5) Classifying: feed final feature vector into a multilayer perceptron (MLP) and softmax layer to get the probability distribution of relation labels.
section: Initial Feature Extraction
Besides word and position features, we utilize NLP tools and resources to get POS, NER, dependency parse and hypernyms features. We aim to grasp more features which may indicate the relationship of the pair of two nominals. All these features could be classified into two types: lexical features and relative position relationship features.
We extract word, POS, NER and hypernyms as lexical features. The WordNet hypernyms are adopted as.
Three different relative position relationship features are extracted and shown in.
In this work we also utilize the relative word position proposed by. The position feature (PF) is derived from the relative distances of the current word to the target nominals e1 and e2. For instance, the word satin the sentence shown in, its relative distance to the target nominal cat (e1) and mat (e2) are 1 and -3.
We also chose the Stanford dependency parser to capture long distance relationships between two nominals in a sentence. Our dependency features are based on paths in the dependency tree. Here, we extract two types of features:
Relative dependency features:  Relative root feature: r_r (root node), r_c (child node of root), r_o (others)  Relative e1 feature: e1_e1 (e1 node), e1_c (child node of e1), e1_p (parent node of e1), e1_o (others)  Relative e2 feature: e2_e2 (e2 node), e2_c (child node of e2), e2_p (parent node of e2), e2_o (others) Dep features: the tag of the current word to its parent node on the dependency tree
The above features represent the relationship between the current word and the target node, including the root, e1, e2 and their parent node. gives an example of dependency parser results.
section: Feature Embedding
Word Embedding is to map each word into a real-valued vector to represent syntactic and semantic information about the words. The size of the word embedding w dis a hyperparameter, which is usually set 50 or 100. For other kinds of initial features, we also transform them into a vector representation r kj , where j means the jth type of feature, the dimension is d kj . The initial value of the vector is random generated with the method proposed by.
section: Given an embedding matrix
Given a sentence x={w1, The parameter m is the size of features. Its value is 6 in this paper, because we choose the following six kinds of features: POS, NER, hypernyms(WNSYN), position feature (PF), dependency feature (Dep), relative-dependency feature (Relative-Dep).
section: BLSTM-based Sentence Level Representation
It is well known that humans can exploit longer context to mine the relationship of two nominals in a sentence. LSTM has shown its merit on capturing long distance relationship in different fields. With this motivation, we adopt BLSTM to get the sentence level representation.
The LSTM equations are given fora single memory block.
Input Gates: í µí± í µí±¡ = í µí¼(í µí± í µí±¥í µí± í µí±¥ í µí±¡ + í µí± ℎí µí± ℎ í µí±¡−1 + í µí± í µí±í µí± í µí± í µí±¡−1 + í µí± í µí± )
Forget Gates: í µí± í µí±¡ = í µí¼(í µí± í µí±¥í µí± í µí±¥ í µí±¡ + í µí± ℎí µí± ℎ í µí±¡−1 + í µí± í µí±í µí± í µí± í µí±¡−1 + í µí± í µí± )
section: Cells: í µí± í µí±¡ = í µí± í µí±¡ í µí± í µí±¡−1 + í µí± í µí±¡ tanh(í µí± í µí±¥í µí± í µí±¥ í µí±¡ + í µí± ℎí µí± ℎ í µí±¡−1 + í µí± í µí± )
Output gates:
í µí± í µí±¡ = í µí¼(í µí± í µí±¥í µí± í µí±¥ í µí±¡ + í µí± ℎí µí± ℎ í µí±¡−1 + í µí± í µí±í µí± í µí± í µí±¡ + í µí± í µí± )
Cell Outputs: ℎ í µí±¡ = í µí± í µí±¡ tanh í µí± í µí±¡ where σ is the activation function, and i, f, o and care respectively the input gate, forget gate, output gate and memory cell.
As shown in, the network contained two sub-networks for the left and right sequence context. The outputs of these subnets for the ith word are integrated in the following way:
í µí°¹ í µí± = [í µí°¹_ℎ í µí± , í µí°¹_í µí± í µí± , í µí°µ_ℎ í µí± , í µí°µ_ℎ í µí± ] where F and B refer to forward and backward directions.
section: Constructing Feature Vector
Inspired by the work from, we extract and concatenate sentence level features and lexical level features to form the finally extracted feature vector.
Lexical level features are focused on the two target nominals e1and e2. We concatenate the vector got from feature embeddings and BLSTM layer to represent the two nominals as.
Sentence level features are focused on the context information, which are constructed from the output of BLSTM layer. As shown in, the matrix got from BLSTM could be divided into A, B and C parts by e1 and e2. Max pooling operation is adopted to extract the vector from A and B parts, B and C parts respectively. The vector m1 and m2 is concatenated to form the sentence level representation. The motivation of constructing sentence level in this way is to strengthen the influence of the context between two entities, which are usually contained more information for indicating the relationship.
section: Classifying
A multilayer perceptron (MLP) will be used for combining sentence level feature and lexical feature into the final extracted feature vector. Finally, the final extracted features are fed into a softmax classifier to predict the sematic relation labels.
section: Experiments
section: Data and metrics
Experiments are conducted on the SemEval-2010 task 8 dataset. It includes 8,000 training instances and 2,717 test instances. There are 9 relation types, and each type has two directions. If the instance could not refer to any of 9 relation types, there is a type Other.
We adopt the official evaluation metric to evaluate our systems, which is based on macro-averaged F1-score for the nine proper relations and others.
section: Experiments setting
The dimension of feature embeddings used in the experiments are listed in the following.
section: Features
Embedding We select two available trained word embeddings to see its influence to the classification performance. One is from, the dimension of word embedding is 50. The other is from Jeffrey, the dimension of word embedding is 100.
As shown in the above, position feature (PF) contains two elements, and relative-dependency feature (Relative-Dep) contains three elements. Therefore, embedding dimension of PF is 2*5, that of RELATIVE-DEP is 3*10.
The BLSTM layer contains 400 units for each direction, and MLP layer contains 1000 units.
section: Results and Analysis
Firstly, we testify the performance of proposed BLSTM-based method with two feature set. One only uses word embedding as input, the other uses all features shown in section 4.1. We also list the results of CNN and CR-CNN methods as reference.
section: Model
Feature, only using word embedding as input features, BLSTM-based method achieves F1 of 82.7, which is similar to the results of CNN with multiple features, and CR-CNN with only word embedding features. However, CR_CNN use word embeddings of size 400, our method use word embeddings of size 100. It proves that BLSTM-based method is effective to mine the relationship between two nominals. With more features, the performance achieves F1 of 84.3, which testifies general features gotten from NLP tools could improve the classification performance.
Secondly, we testify the influence of different features for the classification by removing one type of features from feature set in each time.
From, we see that the performance has very slight change by removing position and NER features. It shows that BLSTM has better representation on sentence level relationship without position features. The information of position features is already contained in BLSTM networks. The whole features are considered from lexical and sentence level. The performances of removing PF or NER feature don't change obviously, maybe the information they contained is represented by other features.  Finally, we compare the results in different word embedding size. In we give the result with using word embedding of size 50. It achieves a F1 of 83.6, about 0.7% less than that with using word embedding of size 100, which shows larger size of dimension of word embedding may contain more information, and it could improve the performance.
section: Removed
We also compare the LSTM based method with only one direction such as forward or backward. The results shows BLSTM has a slight advantage over unidirectional LSTM.
Compared with proposed constructing sentence level feature vector in, we use Max pooling operation directly from A+B+C parts. The result shows F1 of 83.1, which is lower than our method with F1 of 83.6. It proves that our proposed method is effective.
section: Conclusion
In this paper, we propose bidirectional long shortterm memory networks (BLSTM) to solve the relation classification. BLSTM is proposed to mine the sentence level representation. The experiment results show that only using word embedding as input features is enough to achieve state-of-the-art results. Importing more features could further improve the performance of the relation classification.
