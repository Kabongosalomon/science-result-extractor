section: title
CAMR at SemEval-2016 Task 8: An Extended Transition-based AMR Parser
section: abstract
This paper describes CAMR, the transition-based parser that we use in the SemEval-2016 Meaning Representation Parsing task. The main contribution of this paper is a description of the additional sources of information that we use as features in the parsing model to further boost its performance. We start with our existing AMR parser and experiment with three sets of new features: 1) rich named entities , 2) a verbalization list, 3) semantic role labels. We also use the RPI Wikifier to wikify the concepts in the AMR graph. Our parser achieves a Smatch F-score of 62% on the official blind test set.
section: Introduction
AMR parsing is the task of taking a sentence as input and producing as output an Abstract Meaning Representation (AMR) that is a rooted, directed, edge-labeled and leaf-labeled graph that is used to represent the meaning of a sentence. AMR parsing has drawn an increasing amount of attention recently. The first published AMR parser, JAMR), performs AMR parsing in two stages: concept identification and relation identification. treat concept identification as a sequence labeling task and utilize a semi-Markov model to map spans of words in a sentence to concept graph fragments. For relation identification, they adopt graph-based techniques similar to those used in dependency parsing). Instead of finding maximum spanning trees (MST) over words, they propose an algorithm that finds the maximum spanning connected subgraph (MSCG) over concept fragments identified in the first stage. describes a transition-based parser that also involves two stages. In the first step, an input sentence is parsed into a dependency tree with a dependency parser. In the second step, it transforms the dependency tree into an AMR graph by performing a series of actions. Note that the dependency parser used in the first step can be any off-the-shelf dependency parser and does not have to trained on the same data set as used in the second step.
There are also approaches which utilize grammar induction to parse the AMR. presents a model that first use Combinatory Categorial Grammar (CCG) to construct the lambdacalculus representations of the sentence, then further resolve non-compositional dependencies using a factor graph. and formalize parsing AMR as a machine translation problem by learning string-graph/string-tree rules from the annotated data.
Although the field of AMR parsing is growing and several systems () have substantially advanced the state of the art, the overall performance of existing AMR parsers is far less accurate than syntactic parsers. This makes it difficult to use in downstream NLP tasks. In this paper, we aim to boost the AMR parsing performance by introducing additional features. We mainly experiment with three sets of features derived from: 1) rich named entities, 2) a verbalization list provided by ISI, and 3) semantic role labels produced by an automatic SRL system.
The rest of the paper is organized as follows. In Section 2 we briefly describe CAMR, and in Section 3 we describe our extensions for the SemEval shared task. In Section 4 we describe the different AMR releases available with some salient characteristics. We report experimental results in Section 5 and conclude the paper in Section 6.
section: CAMR Overview
section: Basic Configuration
CAMR first uses a dependency parser to parse an input sentence, and then performs a small number of highly general actions to transform the resulting dependency tree to an AMR graph. The transition actions are briefly described below but due to the limited space, we cannot provide the full details of these actions here, and the reader is referred to previous work () fora detailed description of these actions with illustrating examples. CAMR uses three types of actions: actions performed when an edge is visited, actions performed when anode is visited, and actions used to infer abstract concepts in AMR that does not correspond to any word or word sequence in the sentence.
CAMR performs one of the following six actions when an edge is visited:
• NEXT-EDGE-l r (ned): Assign the current edge with edge label l rand go to next edge.
• SWAP-l r (sw): Swap the current edge, make the current dependent as the new head, and assign edge label l r to the swapped edge.
• REATTACH k -l r (reat): Reattach current dependent to node k and assign edge label l r .
• REPLACE-HEAD (rph): Replace current head node with current dependent node.
• REENTRANCE k -l r (reen): Add another head node k to current dependent and assign label l r to edge between k and current dependent.
• MERGE (mrg): Merge two nodes connected by the edge into one node.
From each node in the dependency tree, CAMR performs the following two actions:
• NEXT-NODE-l c (nnd): Assign the current node with concept label l c and go to next node.
• DELETE-NODE (dnd): Delete the current node and all edges associated with current node.
Finally CAMR infers abstract concepts that are not aligned to any tokens in sentence with an INFERl c action. The INFER-l c action works as follows: when the parser visits an node in dependency tree, it inserts an abstract node with concept label l c right between the current node and its parent. For example in, after applying action INFERhave-org-role-91 on node minister, the abstract concept is recovered and subsequent actions can be applied to transform the subgraph to its correct AMR.
section: CAMR Extensions
section: Feature Enrichment
Rich named entity tags Since named entity types in AMR are much more fine-grained than the named entity types defined in atypical named entity tagging system, we assume that using a richer named entity tagger could improve concept identification in parsing. Here we use the 18 named entity types defined in the OntoNotes v5.0 Corpus).
The ISI verbalization list A large proportion of AMR concepts are "normalized" English words. This typically involves cases where the verb form of a noun or an adjective is used as the AMR concept. For example, the AMR concept "attract-01" is used for the adjective "attractive". Similarly, the noun "globalization" would invoke the AMR concept "globalize-01". To help CAMR produce these AMR concepts correctly, we use the verbalizationlist provided by ISI 1 to improve the word-to-AMRconcepts alignment. If any alignment is missed by the JAMR aligner and left un-aligned, we simply add an alignment to map the unaligned concept to its corresponding word token if the word token in the input sentence is in the verbalization list. Semantic role labeling features We use the following semantic role labeling features: 1) EQ FRAMESET. For actions that predict the concept label (NEXT-NODE-l c ), we check whether the candidate concept label l c matches the frameset predicted by ASSERT (). For example, in the partial graph in, when we examine node wants, one of the candidate actions would be NEXT-NODE-want-01. Since the candidate concept label want-01 is equal to node wants's frameset want-01 as predicted by AS-SERT, the value of feature EQ FRAMESET is set to true. 2) IS ARGUMENT. For actions that predict the edge label, we check whether ASSERT predicts that the current dependent is an argument of the current head. Note that arguments output by the semantic role labeler are typically constituents in a syntactic tree. We find the head of the argument and match it against the dependent. If the argument predicted by ASSERT matches the dependent, the value of the IS ARGUMENT is set to true.
Word Clusters For the semi-supervised word cluster feature, we use Brown clusters, more specifically, the 1000-class word clusters trained by. We use prefixes of lengths 4, 6, 10 and 20 of the word's bit-string as features.
section: Wikification
We apply an AMR based wikification system () which utilizes AMR to represent semantic information about entity mentions expressed in their textual context. Given an entity mention m, this system first constructs a Knowledge Graph g(m) with mat the hub and leaf nodes obtained from entity mentions reachable by AMR graph traversal from m. A subset of the leaf nodes are selected as collaborators of m. Mentions connected by AMR conjunction relations are grouped into sets of coherent mentions. For each entity mention m, an initial ranked list of entity candidates E = (e 1 , . . . , en ) is generated based on a salience measure. Then a Knowledge Graph g(e i ) is generated for each entity candidate e i in m's entity candidate list E. The entity candidates are then re-ranked according to Jaccard Similarity, which computes the similarity between g(m) and g(e i ):
Finally, the entity candidate with the highest score is selected as the appropriate entity for wikifying m. Moreover, the Knowledge Graphs of coherent mentions will be merged and wikified collectively.
section: Data
Research on AMR parsing so far has reported on two releases of the annotated data. This SemEval evaluation adds another release. The main difference between the SemEval release and the previous two releases is that the SemEval release contains wikification information which was absent from the previous two releases. Since the Smatch scorer uses this information as part of its scoring algorithm, we cannot make comparisons between results on the SemEval release and results previously reported by other systems. We summarize the characteristics of these three releases below.
a. LDC2013E117-This is a non-public release that was used to report the very first results on AMR parsing. The first results were reported only on a subset of the test partitionThe newswire proxy section. We do not report performance on this release in this paper. b. LDC2014T12-This was the first public release of the AMR data through LDC. Comparable numbers have been reported on this release for the same newswire proxy section as in (a.) as well as the entire test set. c. LDC2015E86-This is the release specifically made available for the SemEval evaluation.
One main difference between this version and the two previous versions is the addition of wikification information. Thus, the performance numbers on the full test set of this release are not directly comparable with previously published results on either of the other two releases.
In the following sections, we will report experiments primarily on the Semeval release (c.). In Section 5.3 we also use the full test set of release (b.) to evaluate the performance improvement made to CAMR as part of the SemEval evaluations against previously reported performance.
70.76 60.57 65.27 Charniak (WSJ) 69.88 60.24 64.70: AMR parsing performance on the SemEval development set (LDC2015E86) across two Charniak parser models
section: Experiments
We use the official release dataset and standard train/dev/test split of SemEval Task 8 for experiments. All the sentences are preprocessed using Stanford CoreNLP () to get tokenization, lemma, named entity tag, POS tag. And we use the aligner that comes with JAMR) to align the sentence with its AMR graph. We then parse the tokenized sentences using Charniak parser)(Its phrase structure output is converted to dependency structure using a slightly modified version of the Stanford CoreNLP converter). Rich named entity tags are generated using Stanford named entity tagger. The semantic role labels are generated using ASSERT-a semantic role labeler (), including a frameset disambiguator trained using a word sense disambiguation system-IMS (. All these components viz., the Charniak parser, Stanford named entity tagger, ASSERT, and IMS word sense disambiguator were retrained on the OntoNotes v5.0 training data 2 . We use the version of CAMR described in () (without the feature extensions) as the baseline. We evaluate our parser with Smatch v2.0.) on all the experiments. It should be noted that all the rows in except for the last one get implicitly penalized by the scorer for lack of wikification information.
section: SemEval Development Set
As discussed in (), the performance of the syntactic parser in the first stage has a high impact on the AMR parsing accuracy. We first do a sanity check to choose the best first stage parser. Here we only consider two scenarios: the Charniak parser trained on WSJ and OntoNotes, as shown in. As using the Charniak parser trained on OntoNotes yields slightly better AMR parsing result, we will use this set-up for the following experiments.
In we present results from extending CAMR. All experiments are conducted on the SemEval development set. we can see that the three major improvements are given by adding the verbalization list, semantic role labels and wikification separately. Rich named entities also yield a 0.4% point improvement, indicating that the more finegrained named entity tagger is helpful to concept identification. In contrast, Brown cluster features actually hurt the overall performance. Therefore we did not use them in the configuration used for the official run.
section: SemEval Test Set and Blind Test Set
We evaluate our parser on the SemEval test set and also report the evaluation result on the SemEval blind test set with the best configuration obtained from §5.1, as shown in. we can see that our parser remain relatively stable on the SemEval test set. However, the evaluation result on blind test set dropped by around 4 points, indicating the blind test set is much harder and we plan to do further error analysis to gain more insight on the difference.
section: Previous Release-LDC2014T12
Since the official dataset of SemEval is annotated with wiki relations that previous releases of the AMR Corpus do not have, we conduct additional experiments on the AMR annotation release 1.0 (LDC2014T12) to gain a clear understanding of the impact of the additional feature. We use the training/development/test split recommended in the release: 10,312 sentences for training, 1,368 sentences for development and 1,371 sentences for testing. We re-train the parser on the LDC2014T12 training set with the best parser configuration given in §5.1 -except for the wikification pass-and test the parser on the full test set. The result is shown in. For comparison, we include the result of our parser in () which are also trained on the same dataset. The results show that the new features yield a modest improvement over our (: CAMR parsing performance on the full test set of release LDC2014T12.
section: Conclusion
We build our system by taking our existing AMR parser and enriching it with three sets of features: 1) rich named entities, 2) a verbalization list, and 3) semantic role labels. We also use a wikifier to resolve the wiki relation in AMR graph. Our results show that the additional features are helpful to the AMR parsing task and a well-designed wikifier could be a helpful post-processing step to AMR parsing.
