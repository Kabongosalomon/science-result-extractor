section: title
Supertagging with LSTMs
section: abstract
In this paper we present new state-of-the-art performance on CCG supertagging and parsing. Our model outperforms existing approaches by an absolute gain of 1.5%. We analyze the performance of several neural models and demonstrate that while feed-forward architectures can compete with bidirectional LSTMs on POS tagging, models that encode the complete sentence are necessary for the long range syntactic information encoded in supertags.
section: Introduction
Morphosyntactic labels for words are commonly used in a variety of NLP applications. For this reason, part-of-speech (POS) tagging and supertagging have drawn significant attention from the community. Combinatory Categorial Grammar is a lexicalized grammar formalism that is widely used for syntactic and semantic parsing. Supertagging) assigns complex syntactic labels to words to enable fast and accurate parsing. The disambiguation of correctly labeling a word with one of over 1,200 CCG labels is difficult compared to choosing on of the 45 POS labels in the Penn Treebank (. In addition to the large label space of CCG supertags, labeling a word correctly depends on knowledge of syntactic phenomena arbitrarily far in the sentence. This is because supertags encode highly specific syntactic information (e.g. types and locations of arguments) about a word's usage in a sentence.
In this paper, we show that Bidirectional Long Short-Term Memory recurrent neural networks (biLSTMs)), which can use information from the entire sentence, area natural and powerful architecture for CCG supertagging. In addition to the bi-LSTM, we create a simple yet novel model that outperforms the previous state-of-the-art RNN model that uses handcrafted features ( ) by 1.5%. Concurrent to this work () introduced a different training methodology for bi-LSTM for supertagging. We provide a detailed analysis of the quality of various LSTM architectures, forward, backward, and bi-directional, shedding light over the ability of the bi-LSTM to exploit rich sentential context necessary for performing supertagging. We also show that a baseline feed-forward neural network (NN) architecture significantly outperforms previous feed-forward NN baselines, with slightly fewer features, achieving better accuracy than the RNN model from ( .
Recently, bi-LSTMs have achieved high accuracies in a simpler sequence labeling task: partof-speech tagging () on the Penn treebank, with small improvements over local models. However, we achieve strong accuracies compared to () using feed-forward neural network model trained on local context, showing that this task does not require bi-LSTMs. Our strong feed-forward NN baselines show the power of feed-forward NNs for some tasks.
Our main contributions are the introduction of anew bi-LSTM model for CCG supertagging that achieves state-of-the-art, on both CCG supertagging and parsing, and a detailed analysis of our results, including a comparison of bi-LSTMs and simpler feed forward NN models for supertagging and POS tagging, which suggests that the added complexity of bi-LSTMs may not be necessary for POS tagging, where local contexts suffice to a much greater extent than in supertagging.
section: 232
We use feed-forward neural network models and bidirectional LSTM (bi-LSTM) based models in this work.
section: Feed-Forward
For both POS tagging and our baseline supertagging model, we use feed-forward neural networks with two hidden layers of rectified linear units. For supertagging, we use a slightly smaller set than, using a left and right 3-word window with suffix and capitalization features for the center word. However, unlike them, we train on the full set of supertag categories observed during training.
In POS tagging, when tagging word w i , we consider only features from a window of five words, with w i at the center. For each w j with i − 2 ≤ j ≤ i + 2, we add w j lowercased and a string that encodes the basic "word shape" of w j . This is computed by replacing all sequences of uppercase letters with A, all sequences of lowercase letters with a, all sequences of digits with 9, and all sequences of other characters with * . Finally, we add two and three letter suffixes and two letter prefix for w i only.
section: LSTM models
We experiment with two kinds of bi-LSTM models. We train a basic bi-LSTM where the forward and backward LSTMs take input words w i and produce hidden state − → hi and ← − hi . For each position, we produce˜hduce˜ duce˜h i , where˜h
where σ(x) = max(0, x) is a rectifier nonlinearity, and where W← − hand W− → hare parameters to be learned. The unnormalized likelihood of an output supertag is computed using supertag embeddings
The final softmax layer computes normalized supertag probabilities.
Although bidirectional LSTMs can capture long distance interactions between words, each output label is predicted independently. To explicitly model supertag interactions, our next model combines two models, the bi-LSTM and a LSTM language model (LM) over the supertags   to hi similar to the combiner for˜hfor˜ for˜h i (Equation 1). Output supertag probabilities are computed just as before, replacing replacing˜hreplacing˜ replacing˜h i with hi . We refer to this model as bi-LSTM-LM. For all our LSTM models, we only use words as input features.
section: Training
We train our models to maximize the log-likelihood of the data with minibatch gradient ascent. Gradients of the models are computed with backpropagation (. Since gold supertags are available during training time and not while decoding, a bi-LSTM-LM trained on gold supertags might not recover from errors caused by using incorrectly predicted supertags. This results in the bi-LSTM-LM slightly underperforming the bi-LSTM (we refer to training with gold supertags as g-train in). To bridge this gap between training and testing we also experiment with a sampling training regime in addition to training.
Scheduled sampling: Following (, for each output token, with some probability p, we use the most likely predicted supertag (arg max ti P (t i | hi )) from the model in position i−1 as input to the supertag LSTM LM in position i and use the gold supertag with probability 1 − p. We denote this training as sstrain-1. We also experiment with using the 5-best previous predicted supertags from the output distribution at position i − 1 and feed them to the LM as input in position i as a bit vector. Additionally, we  g-train ss-train-1 ss-train-5 񮽙 1 use their probabilities (re-normalized over the 5-best tags) and scale the input supertag embeddings with their re-normalized probability during look-up. We refer to this setting as ss-train-5. In this work, we use an inverse sigmoid schedule to compute p,
where sis the epoch number and k is a hyperparameter that is tuned. 1 In, we see that for the development set training with scheduled sampling improves the perplexity of the gold supertag sequence when using predicted supertags, indicating better recovery from conditioning on erroneous supertags. For both ss-train and g-train, we use gold supertags for the output layer and train the model to maximize the log-likelihood of the data.
section: Architectures
Our feed-forward models use 2048 rectifier units in the first hidden layer, 50 and 128 rectifier units in the second hidden layer for POS tagging and Supertagging respectively, and 64 dim. input embeddings.
Our LSTM based models use 512 hidden states. We pre-train our word embeddings with a 7-gram feed-forward neural language model using the NPLM toolkit 3 on a concatenation of the BLLIP corpus () and WSJ sections 02-21 of the Penn Treebank.
section: Supertag Accuracy Model
All Seen Novel % P
section: Decoding
We perform greedy decoding. For each position i, we select the most probable supertag from the output distribution. For the bi-LSTM-LM models trained with g-train and ss-train-1, we feed the most likely supertag from the output distribution as LM input in the next position. We decode with beam search (size 12) for bi-LSTM-LMs trained with g-train and ss-train-1. For the bi-LSTM-LMs trained with ss-train-5, we perform greedy decoding similar to training, feeding the k-best supertags from the output supertag distribution in position i − 1 as input to the LM in position i, along with the renormalized probabilities. We don't perform beam decoding for ss-train-5, as the previous k-best inputs already capture different paths through the network.
section: Data
For supertagging, experiments were run with the standard splits of CCGbank. Unlike previous work no features were extracted for the LSTM models and rare categories were not thresholded. Words were lowercased and digits replaced with @.
CCGbank's training section contains 1,284 lexical categories (394 in Dev). The distribution of categories has along tail, with only a third of those cate-LSTM Supertag F-For Forward Backward bi-LSTM +LM(g-train) ss-train-1 ss-train-5   gories having a frequency count ≥ 10 (the threshold used by existing literature). Following (, we allow the model to predict all categories fora word, not just those with which the word was observed to co-occur in the training data. Accuracies on these unseen (word, cat) pairs are presented in the third column of. presents our Feed-Forward POS tagging results. We achieve 97.28% on the development set and 97.4% on test. Although slightly below state-ofthe-art, we approach existing work with bi-LSTMs, and our models are much simpler and faster to train. 5 shows a steady increase in performance as the model is provided additional context. The forward and backward models are presented with information that maybe arbitrarily faraway in the sentence, but only in a specific direction. This yields weaker results than the Feed Forward model which can see in both directions within a small window. The real gains are achieved by the Bidirectional LSTM which incorporates knowledge from the entire sentence. Our addition of a language model and changes to training, further improve the perfor- We use train, dev, and test splits of WSJ sections 00-18, 19-21, and  mance. Our final model (bi-LSTM-LM+ss-train-1 model with beam decoding) has a test accuracy of 94.5%, 1.5% above state-of-the-art.
section: Results
section: Parsing
Our primary goal in this paper was to demonstrate how a bi-LSTM captures new and different information from uni-directional or feed-forward approaches. This advantage also translates to gains in parsing. presents new state-of-the-art parsing results for both ( ) and our bi-LSTM-LM +ss-train-1. These results were attained using our part-of-speech tags and the Java implementation ) of the C&C parser (Clark and Curran, 2007) 6 .
section: Error Analysis
Our analysis indicates that the information following a word is more informative than what preceded it. compares how well our models recover common and syntactically interesting supertags. In particular, the Forward and Backward models, motivate the need fora Bi-directional approach.: "Neighbor" categories as determined by embedding-based vector similarity for each class of model. As expected for this category, the Backward model captures the argument preference while the Forward model correctly predicts the result.
The first two rows show prepositional phrase attachment decisions (noun and verb attaching categories are in rows one and two, respectively). Here the forward model outperforms the backward model, presumably because knowing the word to be modified and the preposition, is more important than observing the object of the prepositional phrase (the information available to the backward model).
Conversely, the backward model outperforms the forward model inmost of the remaining categories. (Di-)transitive verbs (lines 4 & 5) require knowledge of future arguments in the sentence (e.g. separated by a relative clause). Because English has strict SVO word-order, the presence of a subject is more predictable than the presence of an (in-)direct object. It is therefore not surprising that the backward model is often comparable to the Feed Forward model.
If the information missing from either the forward or backward models were local, the bidirectional model should perform the same as the Feed-Forward model, instead it surpasses it, often by a large margin. This implies there is long range information necessary for choosing a supertag.
Embeddings In addition, we can visualize the information captured by our models by investigating a category's nearest neighbors based on the learned embeddings. shows nearest neighbor categories for (S[dcl]\NP)/(S[adj]\NP) under the Forward, Backward, and Bidirectional models.
We see see that the forward model learns internal structure with the query category, but the list of arguments is nearly random. In contrast, the backward model clusters categories primarily based on the final argument, perhaps sharing similarities in the subject argument only because of the predictable SVO nature of English text. However, due to its lack of forward context the model incorrectly associates categories with less-common first arguments (e.g. S). Finally, the bidirectional embeddings appear to cleanly capture the strengths of both the forward and backward models.
Consistency and Internal Structure Because supertags are highly structured their co-occurence in a sentence must be permitted by the combinators of CCG. Without encoding this explicitly, the language model dramatically increases the percent of predicted sequences that result in a valid parse by up to 15% (last column of).
Sparsity One consideration of our approach is that we do not threshold rare categories or use any tag dictionaries; our models are presented with the full space of CCG categories, despite the long tail. This did not did not hurt performance and the models learned to successfully use several categories which were outside the set of traditionally-thresholded frequent categories. Additionally, the total number of categories used correctly at least once by the bidirectional models was substantially higher than the other models (∼270 vs. ∼220 of 394), though the large number of unused categories (≥120) indicates that there is still substantial room for improvement.
section: Conclusions and Future Work
Because bi-LSTMs with a language model encode an entire sentence at decision time, we demonstrated large gains in supertagging and parsing. Future work will investigate improving performance on rare categories.
