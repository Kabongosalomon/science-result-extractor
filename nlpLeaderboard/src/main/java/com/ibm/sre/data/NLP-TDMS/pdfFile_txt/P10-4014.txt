section: title
It Makes Sense: A Wide-Coverage Word Sense Disambiguation System for Free Text
section: abstract
Word sense disambiguation (WSD) systems based on supervised learning achieved the best performance in SensE-val and SemEval workshops. However, there are few publicly available open source WSD systems. This limits the use of WSD in other applications, especially for researchers whose research interests are not in WSD. In this paper, we present IMS, a supervised English all-words WSD system. The flexible framework of IMS allows users to integrate different preprocessing tools, additional features, and different classifiers. By default, we use linear support vector machines as the classifier with multiple knowledge-based features. In our implementation , IMS achieves state-of-the-art results on several SensEval and SemEval tasks.
section: Introduction
Word sense disambiguation (WSD) refers to the task of identifying the correct sense of an ambiguous word in a given context. As a fundamental task in natural language processing (NLP), WSD can benefit applications such as machine translation ( and information retrieval (.
In previous SensEval workshops, the supervised learning approach has proven to be the most successful WSD approach (). In the most recent SemEval-2007 English all-words tasks, most of the top systems were based on supervised learning methods. These systems used a set of knowledge sources drawn from senseannotated data, and achieved significant improvements over the baselines.
However, developing such a system requires much effort. As a result, very few open source WSD systems are publicly available -the only other publicly available WSD system that we are aware of is SenseLearner (). Therefore, for applications which employ WSD as a component, researchers can only make use of some baselines or unsupervised methods. An open source supervised WSD system will promote the use of WSD in other applications.
In this paper, we present an English all-words WSD system, IMS (It Makes Sense), built using a supervised learning approach. IMS is a Java implementation, which provides an extensible and flexible platform for researchers interested in using a WSD component. Users can choose different tools to perform preprocessing, such as trying out various features in the feature extraction step, and applying different machine learning methods or toolkits in the classification step. Following, we adopt support vector machines (SVM) as the classifier and integrate multiple knowledge sources including parts-of-speech (POS), surrounding words, and local collocations as features. We also provide classification models trained with examples collected from parallel texts, SEMCOR, and the DSO corpus (.
A previous implementation of the IMS system, NUS-PT (), participated in SemEval-2007 English all-words tasks and ranked first and second in the coarse-grained and finegrained task, respectively. Our current IMS implementation achieves competitive accuracies on several SensEval/SemEval English lexical-sample and all-words tasks.
The remainder of this paper is organized as follows. Section 2 gives the system description, which introduces the system framework and the details of the implementation. In Section 3, we present the evaluation results of IMS on SensE-val/SemEval English tasks. Finally, we conclude in Section 4.
section: System Description
In this section, we first outline the IMS system, and introduce the default preprocessing tools, the feature types, and the machine learning method used in our implementation. Then we briefly explain the collection of training data for content words. shows the system architecture of IMS. The system accepts any input text. For each content word w (noun, verb, adjective, or adverb) in the input text, IMS disambiguates the sense of wand outputs a list of the senses of w, where each sense s i is assigned a probability according to the likelihood of s i appearing in that context. The sense inventory used is based on WordNet) version 1.7.1.
section: System Architecture
IMS consists of three independent modules: preprocessing, feature and instance extraction, and classification. Knowledge sources are generated from input texts in the preprocessing step. With these knowledge sources, instances together with their features are extracted in the instance and feature extraction step. Then we train one classification model for each word type. The model will be used to classify test instances of the corresponding word type.
section: Preprocessing
Preprocessing is the step to convert input texts into formatted information. Users can integrate different tools in this step. These tools are applied on the input texts to extract knowledge sources such as sentence boundaries, part-of-speech tags, etc. The extracted knowledge sources are stored for use in the later steps.
In IMS, preprocessing is carried out in four steps:
• Detect the sentence boundaries in a raw input text with a sentence splitter.
• Tokenize the split sentences with a tokenizer.
• Assign POS tags to all tokens with a POS tagger.
• Find the lemma form of each token with a lemmatizer.
By default, the sentence splitter and POS tagger in the OpenNLP toolkit 1 are used for sentence splitting and POS tagging. A Java version of Penn TreeBank tokenizer 2 is applied in tokenization. JWNL 3 , a Java API for accessing the WordNet thesaurus, is used to find the lemma form of each token.
section: Feature and Instance Extraction
After gathering the formatted information in the preprocessing step, we use an instance extractor together with a list of feature extractors to extract the instances and their associated features.
Previous research has found that combining multiple knowledge sources achieves high WSD accuracy (). In IMS, we follow and combine three knowledge sources for all content word types 4 :
• POS Tags of Surrounding Words We use the POS tags of three words to the left and three words to the right of the target ambiguous word, and the target word itself. The POS tag feature cannot cross sentence boundary, which means all the associated surrounding words should be in the same sentence as the target word. If a word crosses sentence boundary, the corresponding POS tag value will be assigned as null. • Surrounding Words Surrounding words features include all the individual words in the surrounding context of an ambiguous word w. The surrounding words can be in the current sentence or immediately adjacent sentences.
However, we remove the words that are in a list of stop words. Words that contain no alphabetic characters, such as punctuation  For example, suppose there is a set of surrounding words features {account, economy, rate, take} in the training data set of the word interest. For a test instance of interest in the sentence "My brother has always taken a keen interest in my work .", the surrounding word feature vector will be <0, 0, 0, 1>.
• Local Collocations We use 11 local collocations features including:
, and C 1,3 , where C i,j refers to an ordered sequence of words in the same sentence of w. Offsets i and j denote the starting and ending positions of the sequence relative tow, where a negative (positive) offset refers to a word to the left (right) of w.
For example, suppose in the training data set, the word interest has a set of local collocations {"account .", "of all", "in my", "to be"} for C 1,2 . For a test instance of interest in the sentence "My brother has always taken a keen interest in my work .", the value of feature C 1,2 will be "in my".
As shown in, we implement one feature extractor for each feature type. The IMS software package is organized in such away that users can easily specify their own feature set by implementing more feature extractors to exploit new features.
section: Classification
In IMS, the classifier trains a model for each word type which has training data during the training process. The instances collected in the previous step are converted to the format expected by the machine learning toolkit in use. Thus, the classification step is separate from the feature extraction step. We use LIBLINEAR as the default classifier of IMS, with a linear kernel and all the parameters set to their default values. Accordingly, we implement an interface to convert the instances into the LIBLINEAR feature vector format.
The utilization of other machine learning software can be achieved by implementing the corresponding module interfaces to them. For instance, IMS provides module interfaces to the WEKA machine learning toolkit), LIBSVM 6 , and MaxEnt 7 .
The trained classification models will be applied to the test instances of the corresponding word types in the testing process. If a test instance word type is not seen during training, we will output its predefined default sense, i.e., the WordNet first sense, as the answer. Furthermore, if a word type has neither training data nor predefined default sense, we will output "U", which stands for the missing sense, as the answer.
section: The Training Data Set for All-Words Tasks
Once we have a supervised WSD system, for the users who only need WSD as a component in their applications, it is also important to provide them the classification models. The performance of a supervised WSD system greatly depends on the size of the sense-annotated training data used.
To overcome the lack of sense-annotated training examples, besides the training instances from the widely used sense-annotated corpus SEMCOR and DSO corpus, we also follow the approach described in to extract more training examples from parallel texts. The process of extracting training examples from parallel texts is as follows:
• Collect a set of sentence-aligned parallel texts. • Perform tokenization on the English texts with the Penn TreeBank tokenizer.
• Perform Chinese word segmentation on the Chinese texts with the Chinese word segmentation method proposed by.
• Perform word alignment on the parallel texts using the GIZA++ software).
• Assign Chinese translations to each sense of an English word w.
• Pick the occurrences of w which are aligned to its chosen Chinese translations in the word alignment output of GIZA++.
• Identify the senses of the selected occurrences of w by referring to their aligned Chinese translations.
Finally, the English side of these selected occurrences together with their assigned senses are used as training data. We only extract training examples from parallel texts for the top 60% most frequently occurring polysemous content words in Brown Corpus (BC), which includes 730 nouns, 190 verbs, and 326 adjectives. For each of the top 60% nouns and adjectives, we gather a maximum of 1,000 training examples from parallel texts. For each of the top 60% verbs, we extract not more than 500 examples from parallel texts, as well as up to 500 examples from the DSO corpus. We also make use of the sense-annotated examples from SEMCOR as part of our training data for all nouns, verbs, adjectives, and 28 most frequently occurring adverbs in BC.
section: POS
noun verb adj adv # of types 11,445 4,705 5,129 28: Statistics of the word types which have training data for WordNet 1.7.1 sense inventory
The frequencies of word types which we have training instances for WordNet sense inventory version 1.7.1 are listed in. We generated classification models with the IMS system for over 21,000 word types which we have training data. On average, each word type has 38 training instances. The total size of the models is about 200 megabytes.
section: Evaluation
In our experiments, we evaluate our IMS system on SensEval and SemEval tasks, the benchmark data sets for WSD. The evaluation on both lexicalsample and all-words tasks measures the accuracy of our IMS system as well as the quality of the training data we have collected.  In SensEval English lexical-sample tasks, both the training and test data sets are provided. A common baseline for lexical-sample task is to select the most frequent sense (MFS) in the training data as the answer.
section: English Lexical-Sample Tasks
We evaluate IMS on the SensEval-2 and SensEval-3 English lexical-sample tasks. compares the performance of our system to the top two systems that participated in the above tasks (). Evaluation results show that IMS achieves significantly better accuracies than the MFS baseline. Comparing to the top participating systems, IMS achieves comparable results.
section: English All-Words Tasks
In SensEval and SemEval English all-words tasks, no training data are provided. Therefore, the MFS baseline is no longer suitable for all-words tasks. Because the order of senses in WordNet is based on the frequency of senses in SEMCOR, the WordNet first sense (WNs1) baseline always assigns the first sense in WordNet as the answer. We will use it as the baseline in all-words tasks.
Using the training data collected with the method described in Section 2.2, we apply our system on the SensEval-2, SensEval-3, and SemEval-2007 English all-words tasks. Similarly, we also compare the performance of our system to the top two systems that participated in the above tasks). The evaluation results are shown in. IMS easily beats the WNs1 baseline. It ranks first in SensEval-3 English finegrained all-words task and SemEval-2007 English coarse-grained all-words task, and is also competitive in the remaining tasks. It is worth noting that because of the small test data set in SemEval-2007 English fine-grained all-words task, the differences between IMS and the best participating systems are not statistically significant.
Overall, IMS achieves good WSD accuracies on both all-words and lexical-sample tasks. The performance of IMS shows that it is a state-of-the-art WSD system.
section: Conclusion
This paper presents IMS, an English all-words WSD system. The goal of IMS is to provide a flexible platform for supervised WSD, as well as an all-words WSD component with good performance for other applications.
The framework of IMS allows us to integrate different preprocessing tools to generate knowledge sources. Users can implement various feature types and different machine learning methods or toolkits according to their requirements. By default, the IMS system implements three kinds of feature types and uses a linear kernel SVM as the classifier. Our evaluation on English lexicalsample tasks proves the strength of our system. With this system, we also provide a large number of classification models trained with the senseannotated training examples from SEMCOR, DSO corpus, and 6 parallel corpora, for all content words. Evaluation on English all-words tasks shows that IMS with these models achieves stateof-the-art WSD accuracies compared to the top participating systems.
As a Java-based system, IMS is platform independent. The source code of IMS and the classification models can be found on the homepage: http://nlp.comp.nus.edu. sg/software and are available for research, non-commercial use.
SensEval-2 68.2% 67.6% 58.3%
section: 82.6% Rank 1 System
69.0% 65.2% 59.1% 82.5% Rank 2 System 63.6% 64.6% 58.7% 81.6% WNs1 61.9% 62.4% 51.4% 78.9%
