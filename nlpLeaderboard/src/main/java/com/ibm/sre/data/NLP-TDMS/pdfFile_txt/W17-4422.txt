section: title
Transfer Learning and Sentence Level Features for Named Entity Recognition on Tweets
section: abstract
We present our system for the WNUT 2017 Named Entity Recognition challenge on Twitter data. We describe two modifications of a basic neural network architecture for sequence tagging. First, we show how we exploit additional labeled data, where the Named Entity tags differ from the target task. Then, we propose away to incorporate sentence level features. Our system uses both methods and ranked second for entity level annotations, achieving an F1-score of 40.78, and second for surface form annotations, achieving an F1-score of 39.33.
section: Introduction
Named Entity Recognition (NER) is an important Natural Language Processing task. Its goal is to tag entities such as names of people and locations in text. State-of-the-art systems can achieve F1-scores of up to 92 points on English news texts (. Achieving good performance on more complex domains such as user generated texts on social media is still a hard problem. The best system submitted for the WNUT 2016 shared task achieved an F1-score of 52.41 on English Twitter data (.
In this work, we present our submission for the WNUT 2017 shared task on "Novel and Emerging Entity Recognition"). We extend a basic neural network architecture for sequence tagging () by incorporating sentence level feature vectors and exploiting additional labeled data for transfer learning. We build on and take inspiration from recent work from on NER for French Twitter data (.
Our submitted solution reached an F1-score of 41.76 for entity level annotations and 57.98 on surface form annotations. This places us second on entity level annotations, where the best system achieved an F1-score of 41.90, and fourth on surface form annotations, where the best system achieved an F1-score of 66.59.
section: System Description
Our solution is based on a sequence labeling system that uses a bidirectional LSTM) which extracts features for training a Conditional Random Field. We apply a transfer learning approach, since previous research has shown that this can improve sequence labeling systems (). More precisely, we modify the base system to allow for joint training on the WNUT 2016 corpus (, which uses a different tag set than our target task. In addition, we extend the system to incorporate sentence level feature vectors. All these methods are combined to build the system that we used for our submission to the WNUT 2017 shared task. shows an overview of the different architectures, which are described in detail in the following sections. shows an overview of our base system. We use a bidirectional Long Short Term Memory network (LSTM) (Hochreiter and) to learn the potential function fora linear chain Conditional Random Field (CRF) to predict a sequence of Named Entity tags y 1:T from a sequence of feature vectors x 1:T . This is based on an architecture previously used in ( Bidirectional LSTM: For every word in wt in a given input sentence w 1:T , we first compute a feature vector x t , which is the concatenation of all the word level features described in Section 2.5. The sequence of feature vectors x 1:T is then fed to a bidirectional LSTM. The output of both the forward and backward LSTM are concatenated to get o 1:T , which get passed through a Rectified Linear Unit, (ReLU )). Every o t ∈ o 1:T then gets passed through a fully connected feed-forward network with one hidden layer and ReLU activation:
section: Basic Sequence Labeling System
Let N tags be the number of possible NER-tags, do the dimension of o t and d h the dimension of the hidden layer. The resulting vector st ∈ R Ntags represents a score for every possible tag y at time step t. The values
Conditional Random Field: A linear chain CRF models the conditional probability of an output sequence y 1:T given an input sequence x 1:T as:
where Z (x 1:T ) is a normalization constant:
φ is a potential function parametrized by a set of parameters Θ. In our case we use:
Let θ be the parameters of the network described above. Then s θ,yt,t (x 1:T ) is the score that the network parametrized by θ outputs for tag y tat time step t given the input sequence x 1:T . A ∈ R Ntags×Ntags is a matrix such that A i,j is the score of transitioning from tag i to tag j.
Training: During training we try to maximize the likelihood of the true tag sequence y 1:T given the input feature vectors x 1:T . We use the Adam () algorithm to optimize the parameters Θ = {θ, A}. Additionally we perform gradient clipping (Pascanu et al., 2012) and apply dropout () to the LSTM outputs o 1:T . The neural network parameters θ are randomly initialized from a normal distribution with mean zero and variance according to) (normal Glorot initialization). The transition scores A are initialized from a uniform distribution with mean zero and variance according to, (uniform Glorot initialization).
section: Transfer Learning
In this setting we use the WNUT 2016 corpus ( as an additional source of labeled data. The idea is to train the upper layers of the neural network on both datasets to improve its generalization ability. It was shown in) that this can improve the system performance. gives an overview of our transfer learning architecture. Modified Architecture: We share all network layers except for the last linear projection to get separate tag scores for each data set:
The resulting tag scores get fed to separate CRFs, which have separate transition matrices A 2016 and A 2017 .
Training: During training we alternately use a batch from each dataset and backpropagate the loss of the corresponding CRF.
section: Incorporating Sentence Level Features
Figure 1c shows how we include sentence level features into our architecture. In this setting we take an additional feature vector f sent = F (x 1:T ) ∈ R dsent for each input sentence x 1:T . Modified Architecture: We use an additional feed-forward network to extract tag scores s sent ∈ R Ntags from the sentence feature vector f sent :
The dimensions used are:
is the dimension of the hidden layer of the feed-forward network. Let s 1:T,word be the scores that the basic network described in Section 2.1 outputs for sequence x 1:T . To get the final scores s 1:T fed to the CRF we add s sent to every s t,word ∈ s 1:T,word : st = s sent + s t,word .
section: Combined System
The combined system adds the sentence level features to the transfer learning architecture. We share all layers except the linear projections to tag scores for both sentence features and word features in a manner analogous to Sections 2.2 and 2.3. The resulting architecture is shown in.. First, we add special padding tokens on both sides of the character sequence w, to extend it to a target length, l w,max . If there is an odd number of paddings, the additional padding is added on the right. For sequences longer than l w,max , only the first l w,max characters are used. An embedding matrix E char ∈ R Nc×dc maps characters to R dc vectors. N c is the number of unique characters in the dataset with the addition of the padding token.
Using E char , we embed the padded sequence wand get C w ∈ R lw,max×dc . A set of m convolution filters ∈ R dc×h is then applied to C w . This results in m feature maps M i ∈ R lw,max−h+1 , which are passed through a ReLU activation. The final feature vector F ∈ R m is attained by max pooling, such that F i = max M i .
The embedding matrix is initialized using uniform Glorot initialization. The m convolution filters are initialized using normal Glorot initialization.
Character Capitalization Convolution Features: Analogous to the word capitalization features, we use additional character capitalization features. The feature options are: upper, lower, punctuation, numeric and other. We apply a neural network with the same architecture as described above to extract the final character capitalization feature vector. Sentence Embeddings: In () the authors introduce sent2vec, anew method for computing sentence embeddings. They show that these embeddings provide improved performance for several downstream tasks.
To train the sent2vec model, we use the same training set as the one used for word embeddings and we use default values for all the model parameters 2 . In particular, the resulting sentence feature vectors are in R 100 .
section: Experiments
We implemented the system described in Section 2.4 using the Tensorflow framework .
We monitored the systems performance during training and aborted experiments that had an F1-score of less than 40 after two epochs (evaluated on the development set). We let successful experiments run for the full 6 epochs (cf. Section 3.2). For the submission to WNUT 2017, we ran 6 successful experiments and submitted the one which 2 https://github.com/epfml/sent2vec 3 https://www.tensorflow.org/: Model Parameters had the highest entity level F1-score on the development set.
section: Preprocessing
Tokenization: Since the WNUT 2016 and WNUT 2017 corpora are in the CoNLL format, they are already tokenized. To tokenize the additional tweets used for training word and sentence embeddings (cf. Section 2.5), we use the Twitter tokenizer provided by the Python NLTK library 4 .
Token Substitution: We perform some simple pattern-based token substitutions. To normalize Twitter user handles, we substitute every word starting with an @ character by a special user token. Similarly, all words starting with the prefix http are replaced by a url token. Finally, for words longer than one character, we remove up to one initial # character. shows the parameters used for training the model.
section: Model Parameters
section: Experiments Performed After The Submission
Following the submission, we conducted additional experiments to investigate the influence of the transfer learning approach and sent2vec features on the system performance.   For each of the 4 systems described in Section 2, we ran 6 experiments. We use the same parameters as shown in Section 3.2. shows precision, recall and F1-score of our system. We compute the mean and standard deviations over the 6 successful experiments we considered for submission (cf. Section 3). shows the breakdown of the performance of the annotations we submitted for the WNUT 2017 shared task. shows the performance of the different subsystems proposed in Section 2. We report the mean and standard deviation over the 6 experiments we performed after submission, for every system.
section: Results
All reported scores were computed using the evaluation script provided by the task organizers.
section: Discussion
From table 4 we can see that using sent2vec features increases precision and decreases recall slightly, leading to an overall lower performance compared to the basic system. The transfer learning system shows a more substantial decrease in precision and increase in recall and overall performs best out of the 4 systems. Combination of the two approaches is counterproductive and outperforms the basic system only slightly.
During training we observed that restarting experiments as described in Section 3 was only necessary when using sent2vec features.
One weakness of our transfer learning setting is that the two datasets we used have almost identical samples and only differ in their annotations. The WNUT 2016 corpus uses 10 entity classes: company, facility, Geo location, movie, music artist, other, person, product, sports team, and TV show. Further work is needed to study the effect of using an unrelated data set for transfer learning.
section: Conclusion
We described a deep learning approach for Named Entity Recognition on Twitter data, which extends a basic neural network for sequence tagging by using sentence level features and transfer learning. Our approach achieved 2nd place at the WNUT 2017 shared task for Named Entity Recognition, obtaining an F1-score of 40.78.
For future work, we plan to explore the power of transfer learning for NER in more depth. For instance, it would be interesting to see how annotated NER data for other languages or other text types affects the system performance.
