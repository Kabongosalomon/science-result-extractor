section: title
Language Modeling with Gated Convolutional Networks
section: abstract
The predominant approach to language mod-eling to date is based on recurrent neural networks. Their success on this task is often linked to their ability to capture unbounded context. In this paper we develop a finite context approach through stacked convolutions, which can be more efficient since they allow paralleliza-tion over sequential tokens. We propose a novel simplified gating mechanism that outperforms Oord et al. (2016b) and investigate the impact of key architectural decisions. The proposed approach achieves state-of-the-art on the WikiText-103 benchmark, even though it features long-term dependencies, as well as competitive results on the Google Billion Words benchmark. Our model reduces the latency to score a sentence by an order of magnitude compared to a recurrent baseline. To our knowledge, this is the first time a non-recurrent approach is competitive with strong recurrent models on these large scale language tasks.
section: Introduction
Statistical language models estimate the probability distribution of a sequence of words by modeling the probability of the next word given preceding words, i.e. P (w 0 , . . . , w N ) = P (w 0 ) N i=1 P (w i |w 0 , . . . , w i−1 ), where w i are discrete word indices in a vocabulary. Language models area critical part of systems for speech recognition) and machine translation.
Recently, neural networks (  outperform classical n-gram language models. These classical models suffer from data sparsity, which makes it difficult to represent large contexts and thus, long-range dependencies. Neural language models tackle this issue by embedding words in continuous space over which a neural network is applied. The current state of the art for language modeling is based on long short term memory networks (LSTM;) which can theoretically model arbitrarily long dependencies.
In this paper, we introduce new gated convolutional networks and apply them to language modeling. Convolutional networks can be stacked to represent large context sizes and extract hierarchical features over larger and larger contexts with more abstractive features. This allows them to model long-term dependencies by applying O( N k ) operations over a context of size N and kernel width k. In contrast, recurrent networks view the input as a chain structure and therefore require a linear number O(N ) of operations.
Analyzing the input hierarchically bears resemblance to classical grammar formalisms which build syntactic tree structures of increasing granuality, e.g., sentences consist of noun phrases and verb phrases each comprising further internal structure). Hierarchical structure also eases learning since the number of non-linearities fora given context size is reduced compared to a chain structure, thereby mitigating the vanishing gradient problem.
Modern hardware is well suited to models that are highly parallelizable. In recurrent networks, the next output depends on the previous hidden state which does not enable parallelization over the elements of a sequence. Convolutional networks, however, are very amenable to this computing paradigm since the computation of all input words can be performed simultaneously ( §2).
Gating has been shown to be essential for recurrent neural networks to reach state-of-the-art performance. Our gated linear units reduce the vanishing gradient problem for deep architectures by providing a linear path for the gradients while retaining non-linear capabilities ( §5.2).
We show that gated convolutional networks outperform other recently published language models such as LSTMs trained in a similar setting on the Google Billion Word Benchmark (). We also evaluate the ability of our models to deal with long-range dependencies on the WikiText-103 benchmark for which the model is conditioned on an entire paragraph rather than a single sentence and we achieve anew state-of-the-art on this dataset (. Finally, we show that gated linear units achieve higher accuracy and converge faster than the LSTM-style gating of).
section: Approach
In this paper we introduce anew neural language model that replaces the recurrent connections typically used in recurrent networks with gated temporal convolutions. Neural language models () produce a representation H = [h 0 , . . . , h N ] of the context for each word w 0 , . . . , w N to predict the next word P (w i |h i ). Recurrent neural networks f compute H through a recurrent function hi = f (h i−1 , w i−1 ) which is an inherently sequential process that cannot be parallelized over i. Our proposed approach convolves the inputs with a function f to obtain H = f * wand therefore has no temporal dependencies, so it is easier to parallelize over the individual words of a sentence. This process will compute each context as a function of a number of preceding words. Compared to recurrent networks, the context size is finite but we will demonstrate both that infinite contexts are not necessary and our models can represent large enough contexts to perform well in practice ( §5). illustrates the model architecture. Words are represented by a vector embedding stored in a lookup table D |V|×e where |V| is the number of words in the vocabulary and e is the embedding size. The input to our model is a sequence of words w 0 , . . . , w N which are represented by
where m, n are respectively the number of input and output feature maps and k is the patch size, X ∈ RN ×m is the input of layer h l (either word embeddings or the outputs of previous layers), W ∈ R k×m×n , b ∈ Rn , V ∈ R k×m×n , c ∈ Rn are learned parameters, σ is the sigmoid function and ⊗ is the element-wise product between matrices.
When convolving inputs, we take care that hi does not contain information from future words. We address this by shifting the convolutional inputs to prevent the kernels
section: Input sentence
section: Text
The cat sat on the mat .
section: w 0 w 1 w 2 w 3 w 4 w 5 w 6
Lookup  from seeing future context (). Specifically, we zero-pad the beginning of the sequence with k − 1 elements, assuming the first input element is the beginning of sequence marker which we do not predict and k is the width of the kernel.
The output of each layer is a linear projection X * W + b modulated by the gates σ(X * V + c). Similar to LSTMs, these gates multiply each element of the matrix X * W + band control the information passed on in the hierarchy.
We dub this gating mechanism Gated Linear Units (GLU). Stacking multiple layers on top of the input E gives a representation of the context for each word
We wrap the convolution and the gated linear unit in a preactivation residual block that adds the input of the block to the output (). The blocks have a bottleneck structure for computational efficiency and each block has up to 5 layers.
The simplest choice to obtain model predictions is to use a softmax layer, but this choice is often computationally inefficient for large vocabularies and approximations such as noise contrastive estimation or hierarchical softmax) are preferred. We choose an improvement of the latter known as adaptive softmax which assigns higher capacity to very frequent words and lower capacity to rare words (). This results in lower memory requirements as well as faster computation at both training and test time.
section: Gating Mechanisms
Gating mechanisms control the path through which information flows in the network and have proven to be useful for recurrent neural networks). LSTMs enable long-term memory via a separate cell controlled by input and forget gates. This allows information to flow unimpeded through potentially many timesteps. Without these gates, information could easily vanish through the transformations of each timestep. In contrast, convolutional networks do not suffer from the same kind of vanishing gradient and we find experimentally that they do not require forget gates.
Therefore, we consider models possessing solely output gates, which allow the network to control what information should be propagated through the hierarchy of layers. We show this mechanism to be useful for language modeling as it allows the model to select which words or features are relevant for predicting the next word. Parallel to our work, have shown the effectiveness of an LSTM-style mechanism of the form tanh(X * W+b)⊗σ(X * V+c) for the convolutional modeling of images. Later, extended this mechanism with additional gates for use in translation and character-level language modeling.
Gated linear units area simplified gating mechanism based on the work of for nondeterministic gates that reduce the vanishing gradient problem by having linear units coupled to the gates. This retains the non-linear capabilities of the layer while allowing the gradient to propagate through the linear unit without scaling. The gradient of the LSTM-style gating of which we dub gated tanh unit (GTU) is
Notice that it gradually vanishes as we stack layers because of the downscaling factors tanh (X) and σ (X). In contrast, the gradient of the gated linear unit
has a path X ⊗ σ(X) without downscaling for the activated gating units in σ(X). This can bethought of as a multiplicative skip connection which helps gradients flow through the layers. We compare the different gating schemes experimentally in Section §5.2 and we find gated linear units allow for faster convergence to better perplexities.. Different from GBW, the sentences are consecutive which allows models to condition on larger contexts rather than single sentences. For both datasets, we add a beginning of sequence marker <S > at the start of each line and an end of sequence marker </S> at the end of each line. On the Google Billion Word corpus each sequence is a single sentence, while on WikiText-103 a sequence is an entire paragraph. The model sees <S> and </S > as input but only predicts the end of sequence marker </S>. We evaluate models by computing the perplexity e 1 N Ni − log p(wi|...,wi−1) on the standard held out test portion of each dataset.
section: Experimental Setup
section: Training
We implement our models in) and train on Tesla M40 GPUs. The majority of our models are trained on single GPU, as we focused on identifying compact architectures with good generalization and efficient computation attest time. We trained larger models with an 8-GPU setup by copying the model onto each GPU and dividing the batch such that each worker computes 1/8th of the gradients. The gradients are then summed using Nvidia NCCL. The multi-GPU setup allowed us to train models with larger hidden units.
We train using Nesterov's momentum. While the cost in terms of memory is storing another vector of the size of the parameters, it increases the speed of convergence significantly with minimal additional [
Conv2. computation compared to standard stochastic gradient descent. The speed of convergence was further increased with gradient clipping () and weight normalization. argue for gradient clipping because it prevents the gradient explosion problem that characterizes RNNs. However, gradient clipping is not tied to RNNs, as it can be derived from the general concept of trust region methods. Gradient clipping is found using a spherical trust region
Empirically, our experiments converge significantly faster with the use of gradient clipping even though we do not use a recurrent architecture.
In combination, these methods led to stable and fast convergence with comparatively large learning rates such as 1.
section: Hyper-parameters
We found good hyper-parameter configurations by crossvalidating with random search on a validation set. For model architecture, we select the number of residual blocks between {1, . . . , 10}, the size of the embeddings with {128, . . . , 256}, the number of units between {128, . . . , 2048}, and the kernel width between {3, . . . , 5}.
In general, finding a good architecture was simple and the rule of thumb is that the larger the model, the better the performance. In terms of optimization, we initialize the layers of the model with the Kaiming initialization (He et al., 2015b), with the learning rate sampled uniformly in the interval [1., 2.], the momentum set to 0.99, and clipping set to 0.1. Good hyper-parameters for the optimizer are quite straightforward to find and the optimal values do not change much between datasets.
section: Results
LSTMs and recurrent networks are able to capture long term dependencies and are fast becoming cornerstones in natural language processing. In this section, we compare strong LSTM and RNN models from the literature to our gated convolutional approach on two datasets.
We find the GCNN outperforms the comparable LSTM results on Google billion words. To accurately compare these approaches, we control for the same number of GPUs and the adaptive softmax output model (), as these variables have a significant influence on performance. In this setting, the GCNN reaches 38.1 test perplexity while the comparable LSTM has 39.8 perplexity.
Further, the GCNN obtains strong performance with much greater computational efficiency. shows that our approach closes the previously significant gap between models that use the full softmax and models with the usually less accurate hierarchical softmax. Thanks to the adap-
section: Model
Test PPL Hardware Sigmoid-RNN-2048 ( 68.3 1 CPU Interpolated KN 5-Gram ( 67.6 100 CPUs Sparse Non-Negative Matrix LM ( 52.9 -RNN-1024 + MaxEnt 9 Gram Features ( 51.3 24 GPUs LSTM-2048-512 ( 43.7 32 GPUs 2-layer LSTM-8192-1024 ( 30.6 32 GPUs BIG GLSTM-G4 23.3 * 8 GPUs LSTM-2048 ( 43.9 1 GPU 2-layer LSTM-2048 ( 39.8 1 GPU GCNN-13
38.1 1 GPU GCNN-14  LSTM+Softmax GCNN+AdaSoftmax. In comparison to the state-of-the-art () which uses the full softmax, the adaptive softmax approximation greatly reduces the number of operations required to reach a given perplexity. tive softmax, the GCNN only requires a fraction of the operations to reach the same perplexity values. The GCNN outperforms other single model state-of-the-art approaches except the much larger LSTM of, a model which requires more GPUs and the much more computationally expensive full softmax. In comparison, the largest model we have trained reaches 31.9 test perplexity compared to the 30.6 of that approach, but only requires training for 2 weeks on 8 GPUs compared to 3 weeks of training on 32 GPUs for the LSTM. Note that these results can be improved by either using mixtures of experts) or ensembles of these models.
section: 8 GPUs
Another relevant concern is if the GCNN's fixed context size can thoroughly model long sequences. On Google Bil- * appeared after submission
section: Model
Test PPL Hardware LSTM-1024 ( 48  We evaluated on the Gigaword dataset following to compare with fully connected models. We found that the fully connected and convolutional network reach respectively 55.6 and 29.4 perplexity. We also ran preliminary experiments on the much smaller Penn tree bank dataset. When we score the sentences independently, the GCNN and LSTM have comparable test perplexity with 108.7 and 109.3 respectively. However, it is possible to achieve better results by conditioning on previous sentences. Unlike the LSTM, we found that the GCNN overfits on this quite small dataset and so we note the model is better suited to larger scale problems.
section: Computational Efficiency
Computational cost is an important consideration for language models. Depending on the application, there area number of metrics to consider. We measure the throughput  of a model as the number of tokens that can be processed per second. Throughput can be maximized by processing many sentences in parallel to amortize sequential operations. In contrast, responsiveness is the speed of processing the input sequentially, one token at a time. Throughput is important because it indicates the time required to process a corpus of text and responsiveness is an indicator of the time to finish processing a sentence. A model can have low responsiveness but high throughput by evaluating many sentences simultaneously through batching. In this case, such a model is slow in finishing processing individual sentences, but can process many sentences at a good rate.
We evaluate the throughput and responsiveness for models that reach approximately 43.9 perplexity on the Google Billion Word benchmark. We consider the LSTM with 2048 units in, a GCNN-8Bottleneck with 7 Resnet blocks that have a bottleneck structure as described by) and a GCNN-8 without bottlenecks. A bottleneck block wedges a k > 1 convolution between two k = 1 layers. This designs reduces computational cost by reducing and increasing dimensionality with the k = 1 layers so that the convolution operates in a lower dimensional space. Our results show that the use of bottleneck blocks is important to maintaining computational efficiency.
The throughput of the LSTM is measured by using a large batch of 750 sequences of length 20, resulting in 15, 000 tokens per batch. The responsiveness is the average speed to process a sequence of 15, 000 contiguous tokens. shows that the throughput for the LSTM and the GCNN are similar. The LSTM performs very well on GPU because the large batch size of 750 enables high parallelization over different sentences. This is because the LSTM implementation has been thoroughly optimized and uses cuDNN, whereas the cuDNN implementation of convolutions is not been optimized for the 1-D convolutions we use in our model. We believe much better performance can be achieved by a more efficient 1-D cuDNN convolution. Unlike the LSTM, the GCNN can be parallelized both over sequences as well as across the tokens of each sequence, allowing the GCNN to have 20x higher responsiveness.
section: Gating Mechanisms
In this section, we compare the gated linear unit with other mechanisms as well as to models without gating.
We consider the LSTM-style gating mechanism (GTU). Test perplexity as a function of context for Google Billion Word (left) and Wiki-103 (right). We observe that models with bigger context achieve better results but the results start diminishing quickly after a context of 20. the effect of gating since the Tanh model can bethought of as a GTU network with the sigmoid gating units removed. The results show that the gating units make avast difference and provide useful modeling capabilities, as there is a large difference in the performance between GTU and Tanh units. Similarly, while ReLU unit is not an exact ablation of the gating units in the GLU, it can be seen as a simplification ReLU(X) = X ⊗ (X > 0) where the gates become active depending on the sign of the input. Also in this case, GLU units lead to lower perplexity.
In (right) we repeat the same experiment on the larger Google Billion Words dataset. We consider a fixed time budget of 100 hours because of the considerable training time required for this task. Similar to WikiText-103, the gated linear units achieve the best results on this problem. There is a gap of about 5 perplexity points between the GLU and ReLU which is similar to the difference between the LSTM and RNN models measured by on the same dataset.
section: Non-linear Modeling
The experiments so far have shown that the gated linear unit benefits from the linear path the unit provides compared to other non-linearities. Next, we compare networks with GLUs to purely linear networks and networks with bilinear layers in order to measure the impact of the nonlinear path provided by the gates of the GLU. One motivation for this experiment is the success of linear models on many natural language processing tasks). We consider deep linear convolutional networks where the layers lack the gating units of the GLU and take the form h l (X) = X * W + b. Stacking several layers on top of each other is simply a factorization of the model which remains linear up to the softmax, at which point it becomes log-linear. Another variation of GLUs are bilinear layers) which take the form shows that GLUs perform best, followed by bilinear layers and then linear layers. Bilinear layers improve over linear ones by more than 40 perplexity points, and the GLU improves another 20 perplexity points over the bilinear model. The linear model performs very poorly at perplexity 115 even compared to 67.6 of a Kneser-Ney 5-gram model, even though the former has access to more context. Surprisingly, the introduction of the bilinear units is enough to reach 61 perplexity on Google Billion Word, which surpasses both Kneser-Ney 5-gram models and the non-linear neural model of (. shows the impact of context size for the gated CNN. We tried different combinations of network depth and kernel widths for each context size and chose the best performing one for each size. Generally, larger contexts improve accuracy but returns drastically diminish with windows larger than 40 words, even for WikiText-103 where we may condition on an entire Wikipedia article. This means that the unlimited context offered by recurrent models is not strictly necessary for language modeling. Furthermore, this finding is also congruent with the fact that good performance with recurrent networks can be obtained by truncating gradients after only 40 timesteps using truncated back propagation through time. also shows that WikiText-103 benefits much more from larger context size than Google Billion Word as the performance degrades more sharply with smaller contexts. WikiText-103 provides much more context than Google Billion Word where the average sentence size is 20. However, while the average size of the documents is close to 4000 tokens, we find that strong performance can be achieved with a context size as low as 30 tokens.
section: Context Size
section: Training
In this section, we perform an ablation study of the impact of weight normalization and gradient clipping. We separately cross-validate the hyper-parameters of each configuration to make the comparison fair. Due to the high cost of each of these experiments, we only consider a single iteration over the training data. shows that both methods significantly speedup convergence. Weight normalization in particular improves the speed by over two times. This speedup is partly due to the ability to use much larger learning rates (1 instead of 0.01) than would otherwise be possible. Both clipping and weight normalization add computational overhead, but it is minor compared to the large gains in convergence speed.
section: Conclusion
We introduce a convolutional neural network for language modeling with a novel gating mechanism. Compared to recurrent neural networks, our approach builds a hierarchical representation of the input words that makes it easier to capture long-range dependencies, similar in spirit to the tree-structured analysis of linguistic grammar formalisms. The same property eases learning since features are passed through a fixed number of layers and non-linearities, unlike for recurrent networks where the number of processing steps differs depending on the position of the word in the input. The results show that our gated convolutional network achieves anew state of the art on WikiText-103. On the Google Billion Word benchmark, we show competitive results can be achieved with significantly fewer resources.
