section: title
Published as a conference paper at ICLR 2017 RECURRENT BATCH NORMALIZATION
section: abstract
We propose a reparameterization of LSTM that brings the benefits of batch nor-malization to recurrent neural networks. Whereas previous works only apply batch normalization to the input-to-hidden transformation of RNNs, we demonstrate that it is both possible and beneficial to batch-normalize the hidden-to-hidden transition , thereby reducing internal covariate shift between time steps. We evaluate our proposal on various sequential problems such as sequence classification , language modeling and question answering. Our empirical results show that our batch-normalized LSTM consistently leads to faster convergence and improved generalization.
section: INTRODUCTION
Recurrent neural network architectures such as LSTM) and GRU () have recently exhibited state-of-the-art performance on a wide range of complex sequential problems including speech recognition, machine translation ( ) and image and video captioning (. Top-performing models, however, are based on very high-capacity networks that are computationally intensive and costly to train. Effective optimization of recurrent neural networks is thus an active area of study (.
It is well-known that for deep feed-forward neural networks, covariate shift) degrades the efficiency of training. Covariate shift is a change in the distribution of the inputs to a model. This occurs continuously during training of feed-forward neural networks, where changing the parameters of a layer affects the distribution of the inputs to all layers above it. As a result, the upper layers are continually adapting to the shifting input distribution and unable to learn effectively. This internal covariate shift may play an especially important role in recurrent neural networks, which resemble very deep feed-forward networks.
Batch normalization) is a recently proposed technique for controlling the distributions of feed-forward neural network activations, thereby reducing internal covariate shift. It involves standardizing the activations going into each layer, enforcing their means and variances to be invariant to changes in the parameters of the underlying layers. This effectively decouples each layer's parameters from those of other layers, leading to a better-conditioned optimization problem. Indeed, deep neural networks trained with batch normalization converge significantly faster and generalize better.
Although batch normalization has demonstrated significant training speed-ups and generalization benefits in feed-forward networks, it is proven to be difficult to apply in recurrent architectures (. It has found limited use in stacked RNNs, where the normalization is applied "vertically", i.e. to the input of each RNN, but not "horizontally" between timesteps. RNNs are deeper in the time direction, and as such batch normalization would be most beneficial when applied horizontally. However, hypothesized that applying batch normalization in this way hurts training because of exploding gradients due to repeated rescaling.
Our findings run counter to this hypothesis. We show that it is both possible and highly beneficial to apply batch normalization in the hidden-to-hidden transition of recurrent models. In particular, we describe a reparameterization of LSTM (Section 3) that involves batch normalization and demonstrate that it is easier to optimize and generalizes better. In addition, we empirically analyze the gradient backpropagation and show that proper initialization of the batch normalization parameters is crucial to avoiding vanishing gradient (Section 4). We evaluate our proposal on several sequential problems and show (Section 5) that our LSTM reparameterization consistently outperforms the LSTM baseline across tasks, in terms of both time to convergence and performance. simultaneously investigated batch normalization in recurrent neural networks, albeit only for very short sequences (10 steps). independently developed a variant of batch normalization that is also applicable to recurrent neural networks and delivers similar improvements as our method.
section: PREREQUISITES
2.1 LSTM Long Short-Term Memory (LSTM) networks are an instance of a more general class of recurrent neural networks (RNNs), which we review briefly in this paper. Given an input sequence X = (x 1 , x 2 , . . . , x T ), an RNN defines a sequence of hidden states ht according to
where
RNNs are popular in sequence modeling thanks to their natural ability to process variable-length sequences. However, training RNNs using first-order stochastic gradient descent (SGD) is notoriously difficult due to the well-known problem of exploding/vanishing gradients (. Gradient vanishing occurs when states ht are not influenced by small changes in much earlier states h τ , t τ , preventing learning of long-term dependencies in the input data. Although learning long-term dependencies is fundamentally difficult (, its effects can be mitigated through architectural variations such as LSTM), GRU () and iRNN/uRNN (.
In what follows, we focus on the LSTM architecture) with recurrent transition given by
where
σ is the logistic sigmoid function, and the operator denotes the Hadamard product.
The LSTM differs from simple RNNs in that it has an additional memory cell ct whose update is nearly linear which allows the gradient to flow back through time more easily. In addition, unlike the RNN which overwrites its content at each timestep, the update of the LSTM cell is regulated by a set of gates. The forget gate ft determines the extent to which information is carried over from the previous timestep, and the input gate it controls the flow of information from the current input x t . The output gate o t allows the model to read from the cell. This carefully controlled interaction with the cell is what allows the LSTM to robustly retain information for long periods of time.
section: BATCH NORMALIZATION
Covariate shift) is a phenomenon in machine learning where the features presented to a model change in distribution. In order for learning to succeed in the presence of covariate shift, the model's parameters must be adjusted not just to learn the concept at hand but also to adapt to the changing distribution of the inputs. In deep neural networks, this problem manifests as internal covariate shift, where changing the parameters of a layer affects the distribution of the inputs to all layers above it.
Batch Normalization) is a recently proposed network reparameterization which aims to reduce internal covariate shift. It does so by standardizing the activations using empirical estimates of their means and standard deviations. However, it does not decorrelate the activations due to the computationally costly matrix inversion. The batch normalizing transform is as follows:
where h ∈ Rd is the vector of (pre)activations to be normalized, γ ∈ Rd , β ∈ Rd are model parameters that determine the mean and standard deviation of the normalized activation, and ∈ R is a regularization hyperparameter. The division should be understood to proceed elementwise.
At training time, the statistics E[h] and Var are estimated by the sample mean and sample variance of the current minibatch. This allows for backpropagation through the statistics, preserving the convergence properties of stochastic gradient descent. During inference, the statistics are typically estimated based on the entire training set, so as to produce a deterministic prediction.
section: BATCH-NORMALIZED LSTM
This section introduces a reparameterization of LSTM that takes advantage of batch normalization. Contrary to;, we leverage batch normalization in both the input-to-hidden and the hidden-to-hidden transformations. We introduce the batch-normalizing transform BN( · ; γ, β) into the LSTM as follows:
In our formulation, we normalize the recurrent term W h h t−1 and the input term W xx t separately. Normalizing these terms individually gives the model better control over the relative contribution of the terms using the γ hand γ x parameters. We set β h = β x = 0 to avoid unnecessary redundancy, instead relying on the pre-existing parameter vector b to account for both biases. In order to leave the LSTM dynamics intact and preserve the gradient flow through ct , we do not apply batch normalization in the cell update.
The batch normalization transform relies on batch statistics to standardize the LSTM activations. It would seem natural to share the statistics that are used for normalization across time, just as recurrent neural networks share their parameters overtime. However, we find that simply averaging statistics overtime severely degrades performance. Although LSTM activations do converge to a stationary distribution, we observe that their statistics during the initial transient differ significantly (see Figure 5 in Appendix A). Consequently, we recommend using separate statistics for each timestep to preserve information of the initial transient phase in the activations. 1
Generalizing the model to sequences longer than those seen during training is straightforward thanks to the rapid convergence of the activations to their steady-state distributions (cf.). For our experiments we estimate the population statistics separately for each timestep 1, . . . , T max where T max is the length of the longest training sequence. When attest time we need to generalize beyond T max , we use the population statistic of time T max for all time steps beyond it.
During training we estimate the statistics across the minibatch, independently for each timestep. At test time we use estimates obtained by averaging the minibatch estimates over the training set.
section: INITIALIZING γ FOR GRADIENT FLOW
Although batch normalization allows for easy control of the pre-activation variance through the γ parameters, common practice is to normalize to unit variance. We suspect that the previous difficulties with recurrent batch normalization reported in Laurent et al.   In(a), we show how the pre-activation variance impacts gradient propagation in a simple RNN on the sequential MNIST task described in Section 5.1. Since backpropagation operates in reverse, the plot is best read from right to left. The quantity plotted is the norm of the gradient of the loss with respect to the hidden state at different time steps. For large values of γ, the norm quickly goes to zero as gradient is propagated back in time. For small values of γ the norm is nearly constant.
To demonstrate what we think is the cause of this vanishing, we drew samples x from a set of centered Gaussian distributions with standard deviation ranging from 0 to 1, and computed the derivative tanh (x) = 1 − tanh 2 (x) ∈ [0, 1] for each. shows the empirical distribution of the derivative as a function of standard deviation. When the input standard deviation is low, the input tends to be close to the origin where the derivative is close to 1. As the standard deviation increases, the expected derivative decreases as the input is more likely to be in the saturation regime. At unit standard deviation, the expected derivative is much smaller than 1.
We conjecture that this is what causes the gradient to vanish, and recommend initializing γ to a small value. In our trials we found that values of 0.01 or lower caused instabilities during training. Our choice of 0.1 seems to work well across different tasks.
section: EXPERIMENTS
This section presents an empirical evaluation of the proposed batch-normalized LSTM on four different tasks. Note that for all the experiments, we initialize the batch normalization scale and shift parameters γ and β to 0.1 and 0 respectively. Pixel-by-Pixel Permuted-MNIST (Validation Set) lstm bn_lstm: Accuracy on the validation set for the pixel by pixel MNIST classification tasks. The batch-normalized LSTM is able to converge faster relatively to a baseline LSTM. Batch-normalized LSTM also shows some improve generalization on the permuted sequential MNIST that require to preserve long-term memory information.
section: SEQUENTIAL MNIST
We evaluate our batch-normalized LSTM on a sequential version of the MNIST classification task (. The model processes each image one pixel at a time and finally predicts the label. We consider both sequential MNIST tasks, MNIST and permuted MNIST (pMNIST). In MNIST, the pixels are processed in scanline order. In pMNIST the pixels are processed in a fixed random order.
Our baseline consists of an LSTM with 100 hidden units, with a softmax classifier to produce a prediction from the final hidden state. We use orthogonal initialization for all weight matrices, except for the hidden-to-hidden weight matrix which we initialize to be the identity matrix, as this yields better generalization performance on this task for both models. The model is trained using RMSProp) with learning rate of 10 −3 and 0.9 momentum. We apply gradient clipping at 1 to avoid exploding gradients.
The in-order MNIST task poses a unique problem for our model: the input for the first hundred or so timesteps is constant across examples since the upper pixels are almost always black. This causes the variance of the hidden states to be exactly zero fora long period of time. Normalizing these zerovariance activations involves dividing zero by a small number at many timesteps, which does not affect the forward-propagated activations but causes the back-propagated gradient to explode. We workaround this by adding Gaussian noise to the initial hidden states. Although the normalization amplifies the noise to signal level, we find that it does not hurt performance compared to datadependent ways of initializing the hidden states.
section: Model
MNIST pMNIST  characterize dependencies across varying time scales in order to solve this task. Our results suggest that BN-LSTM is better able to capture these long-term dependencies. reports the test set accuracy of the early stop model for LSTM and BN-LSTM using the population statistics. Recurrent batch normalization leads to a better test score, especially for pMNIST where models have to leverage long-term temporal depencies. In addition, shows that our batch-normalized LSTM achieves state of the art on both MNIST and pMNIST.
section: CHARACTER-LEVEL PENN TREEBANK
We evaluate our model on the task of character-level language modeling on the Penn Treebank corpus () according to the train/valid/test partition of . For training, we segment the training sequence into examples of length 100. The training sequence does not cleanly divide by 100, so for each epoch we randomly crop a subsequence that does and segment that instead.
Our baseline is an LSTM with 1000 units, trained to predict the next character using a softmax classifier on the hidden state ht . We use stochastic gradient descent on minibatches of size 64, with gradient clipping at 1.0 and step rule determined by Adam) with learning rate 0.002. We use orthogonal initialization for all weight matrices. The setup for the batch-normalized LSTM is the same in all respects except for the introduction of batch normalization as detailed in 3.
We show the learning curves in. BN-LSTM converges faster and generalizes better than the LSTM baseline. shows the generalization of our model to longer sequences. We observe that using the population statistics improves generalization performance, which confirms that repeating the last population statistic (cf. Section 3) is a viable strategy. In table 2 we report the performance of our best models (early-stopped on validation performance) on the Penn Treebank test sequence. Follow up works havd since improved the state of the art ().
section: TEXT8
We evaluate our model on a second character-level language modeling task on the much larger text8 dataset. This dataset is derived from Wikipedia and consists of a sequence of 100M characters including only alphabetical characters and spaces. We follow ;  and use the first 90M characters for training, the next 5M for validation and the final 5M characters for testing. We train on nonoverlapping sequences of length 180.
Both our baseline and batch-normalized models are LSTMs with 2000 units, trained to predict the next character using a softmax classifier on the hidden state ht . We use stochastic gradient descent on minibatches of size 128, with gradient clipping at 1.0 and step rule determined by) with learning rate 0.001. All weight matrices were initialized to be orthogonal.
We early-stop on validation performance and report the test performance of the resulting model in. We observe that BN-LSTM obtains a significant performance improvement over the LSTM baseline. has since improved on our performance.
section: Model text8
td-LSTM: Bits-per-character on the text8 test sequence.
section: TEACHING MACHINES TO READ AND COMPREHEND
Recently, introduced a set of challenging benchmarks for natural language processing, along with neural network architectures to address them. The tasks involve reading real news articles and answering questions about their content. Their principal model, the Attentive Reader, is a recurrent neural network that invokes an attention mechanism to locate relevant information in the document. Such models are notoriously hard to optimize and yet increasingly popular.
To demonstrate the generality and practical applicability of our proposal, we apply batch normalization in the Attentive Reader model and show that this drastically improves training.
We evaluate several variants. The first variant, referred to as BN-LSTM, consists of the vanilla Attentive Reader model with the LSTM simply replaced by our BN-LSTM reparameterization. The second variant, termed BN-everywhere, is exactly like the first, except that we also introduce batch normalization into the attention computations, normalizing each term going into the tanh nonlinearities.
Our third variant, BN-e*, is like BN-everywhere, but improved to more carefully handle variablelength sequences. Throughout this experiment we followed the common practice of padding each batch of variable-length data with zeros. However, this biases the batch mean and variance of x t toward zero. We address this effect using sequencewise normalization of the inputs as proposed by;. That is, we share statistics overtime for normalization   0.8
(a) Error rate on the validation set for the Attentive Reader models on a variant of the CNN QA task (. As detailed in Appendix C, the theoretical lower bound on the error rate on this task is 43%.  of the input terms W xx t , but not for the recurrent terms W h ht or the cell output ct . Doing so avoids many issues involving degenerate statistics due to input sequence padding.
Our fourth and final variant BN-e** is like BN-e* but bidirectional. The main difficulty in adapting to bidirectional models also involves padding. Padding poses no problem as long as it is properly ignored (by not updating the hidden states based on padded regions of the input). However to perform the reverse application of a bidirectional model, it is common to simply reverse the padded sequences, thus moving the padding to the front. This causes similar problems as were observed on the sequential MNIST task (Section 5.1): the hidden states will not diverge during the initial timesteps and hence their variance will be severely underestimated. To get around this, we reverse only the unpadded portion of the input sequences and leave the padding in place.
See Appendix C for hyperparameters and task details. .5% and 50.0% for the baseline, BN-LSTM and BN-everywhere respectively. We emphasize that these results were obtained without any tweaking -all we did was to introduce batch normalization.
BN-e* and BN-e** converge faster yet, and reach lower minima: 47.1% and 43.9% respectively.  We train and evaluate our best model, BN-e**, on the full task from (). On this dataset we had to reduce the number of hidden units to 120 to avoid severe overfitting. Training curves for BN-e** and a vanilla LSTM are shown in(b). reports performances of the early-stopped models.
section: Model
section: CONCLUSION
Contrary to previous findings by;, we have demonstrated that batch-normalizing the hidden states of recurrent neural networks greatly improves optimization. Indeed, doing so yields benefits similar to those of batch normalization in feed-forward neural networks: our proposed BN-LSTM trains faster and generalizes better on a variety of tasks including language modeling and question-answering. We have argued that proper initialization of the batch normalization parameters is crucial, and suggest that previous difficulties were due in large part to improper initialization. Finally, we have shown our model to apply to complex settings involving variable-length data, bidirectionality and highly nonlinear attention mechanisms.
section: B SENSITIVITY TO INITIALIZATION OF γ
In Section 4 we investigated the effect of initial γ on gradient flow. To show the practical implications of this, we performed several experiments on the pMNIST and Penn Treebank benchmarks. The resulting performances are shown in.
The pMNIST training curves confirm that higher initial values of γ are detrimental to the optimization of the model. For the Penn Treebank task however, the effect is gone.
We believe this is explained by the difference in the nature of the two tasks. For pMNIST, the model absorbs the input sequence and only at the end of the sequence does it make a prediction on which it receives feedback. Learning from this feedback requires propagating the gradient all the way back through the sequence.
In the Penn Treebank task on the other hand, the model makes a prediction at each timestep. At each step of the backward pass, afresh learning signal is added to the backpropagated gradient. Essentially, the model is able to get off the ground by picking up short-term dependencies. This fails on pMNIST wich is dominated by long-term dependencies ().
section: C TEACHING MACHINES TO READ AND COMPREHEND: TASK SETUP
We evaluate the models on the question answering task using the CNN corpus (, with placeholders for the named entities. We follow a similar preprocessing pipeline as. During training, we randomly sample the examples with replacement and shuffle the order of the placeholders in each text inside the minibatch. We use a vocabulary of 65829 words.
We deviate from in order to save computation: we use only the 4 most relevant sentences from the description, as identified by a string matching procedure. Both the training and validation sets are preprocessed in this way. Due to imprecision this heuristic sometimes strips the   answers from the passage, putting an upper bound of 57% on the validation accuracy that can be achieved.
For the reported performances, the first three models (LSTM, BN-LSTM and BN-everywhere) are trained using the exact same hyperparameters, which were chosen because they work well for the baseline. The hidden state is composed of 240 units. We use stochastic gradient descent on minibatches of size 64, with gradient clipping at 10 and step rule determined by) with learning rate 8 × 10 −5 .
For BN-e* and BN-e**, we use the same hyperparameters except that we reduce the learning rate to 8 × 10 −4 and the minibatch size to 40. reports hyperparameter values that were tried in the experiments. Learning rate: 8e-3, 8e-4, 8e-5, 8e-6 Hidden state size: 60, 120, 240, 280: Hyperparameter values that have been explored in the experiments.
section: D HYPERPARAMETER SEARCHES
For MNIST and pMNIST, the hyperparameters were varied independently. For Penn Treebank, we performed a full grid search on learning rate and hidden state size, and later performed a sensitivity
