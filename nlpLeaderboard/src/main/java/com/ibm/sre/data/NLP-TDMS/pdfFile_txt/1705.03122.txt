section: title
Convolutional Sequence to Sequence Learning
section: abstract
The prevalent approach to sequence to sequence learning maps an input sequence to a variable length output sequence via recurrent neural networks. We introduce an architecture based entirely on convolutional neural networks. 1 Compared to recurrent models, computations overall elements can be fully parallelized during training to better exploit the GPU hardware and optimization is easier since the number of non-linearities is fixed and independent of the input length. Our use of gated linear units eases gradient propagation and we equip each decoder layer with a separate attention module. We outperform the accuracy of the deep LSTM setup of Wu et al. (2016) on both WMT'14 English-German and WMT'14 English-French translation at an order of magnitude faster speed, both on GPU and CPU.
section: Introduction
Sequence to sequence learning has been successful in many tasks such as machine translation, speech recognition ( and text summarization) amongst others. The dominant approach to date encodes the input sequence with a series of bi-directional recurrent neural networks (RNN) and generates a variable length output with another set of decoder RNNs, both of which interface via a soft-attention mechanism (. In machine translation, this architecture has been demonstrated to outperform traditional phrase-based models by large margins;.
Convolutional neural networks are less common for sequence modeling, despite several advantages (). Compared to recurrent layers, convolutions create representations for fixed size contexts, however, the effective context size of the network can easily be made larger by stacking several layers on top of each other. This allows to precisely control the maximum length of dependencies to be modeled. Convolutional networks do not depend on the computations of the previous time step and therefore allow parallelization over every element in a sequence. This contrasts with RNNs which maintain a hidden state of the entire past that prevents parallel computation within a sequence.
Multi-layer convolutional neural networks create hierarchical representations over the input sequence in which nearby input elements interact at lower layers while distant elements interact at higher layers. Hierarchical structure provides a shorter path to capture long-range dependencies compared to the chain structure modeled by recurrent networks, e.g. we can obtain a feature representation capturing relationships within a window of n words by applying only O( n k ) convolutional operations for kernels of width k, compared to a linear number O(n) for recurrent neural networks. Inputs to a convolutional network are fed through a constant number of kernels and non-linearities, whereas recurrent networks apply up ton operations and non-linearities to the first word and only a single set of operations to the last word. Fixing the number of nonlinearities applied to the inputs also eases learning.
Recent work has applied convolutional neural networks to sequence modeling such as who introduce recurrent pooling between a succession of convolutional layers or who tackle neural translation without attention. However, none of these approaches has been demonstrated improvements overstate of the art results on large benchmark datasets. Gated convolutions have been previously explored for machine translation by but their evaluation was restricted to a small dataset and the model was used in tandem with a traditional count-based model. Architec-tures which are partially convolutional have shown strong performance on larger tasks but their decoder is still recurrent (.
In this paper we propose an architecture for sequence to sequence modeling that is entirely convolutional. Our model is equipped with gated linear units ( and residual connections (). We also use attention in every decoder layer and demonstrate that each attention layer only adds a negligible amount of overhead. The combination of these choices enables us to tackle large scale problems ( §3).
We evaluate our approach on several large datasets for machine translation as well as summarization and compare to the current best architectures reported in the literature. On WMT'16 English-Romanian translation we achieve anew state of the art, outperforming the previous best result by 1.9 BLEU. On WMT'14 English-German we outperform the strong LSTM setup of by 0.5 BLEU and on WMT'14 English-French we outperform the likelihood trained system of by 1.6 BLEU. Furthermore, our model can translate unseen sentences at an order of magnitude faster speed than on GPU and CPU hardware ( §4, §5).
section: Recurrent Sequence to Sequence Learning
Sequence to sequence modeling has been synonymous with recurrent neural network based encoder-decoder architectures (). The encoder RNN processes an input sequence x = (x 1 , . . . , x m ) of m elements and returns state representations z = (z 1 . . . . , z m ). The decoder RNN takes z and generates the output sequence y = (y 1 , . . . , y n ) left to right, one element at a time. To generate output y i+1 , the decoder computes anew hidden state h i+1 based on the previous state hi , an embedding g i of the previous target language wordy i , as well as a conditional input c i derived from the encoder output z. Based on this generic formulation, various encoder-decoder architectures have been proposed, which differ mainly in the conditional input and the type of RNN.
Models without attention consider only the final encoder state z m by setting c i = z m for all i (), or simply initialize the first decoder state with z m (), in which case c i is not used. Architectures with attention ( compute c i as a weighted sum of (z 1 . . . . , z m ) at each time step. The weights of the sum are referred to as attention scores and allow the network to focus on different parts of the input sequence as it generates the output sequences. Attention scores are computed by essentially comparing each encoder state z j to a combination of the previous decoder state hi and the last prediction y i ; the result is normalized to be a distribution over input elements.
Popular choices for recurrent networks in encoder-decoder models are long short term memory networks (LSTM;) and gated recurrent units (GRU;). Both extend Elman RNNs) with a gating mechanism that allows the memorization of information from previous time steps in order to model long-term dependencies. Most recent approaches also rely on bi-directional encoders to build representations of both past and future contexts (. Models with many layers often rely on shortcut or residual connections ().
section: A Convolutional Architecture
Next we introduce a fully convolutional architecture for sequence to sequence modeling. Instead of relying on RNNs to compute intermediate encoder states z and decoder states h we use convolutional neural networks (CNN).
section: Position Embeddings
First, we embed input elements x = (x 1 , . . . , x m ) in distributional space as w = (w 1 , . . . , w m ), where w j ∈ Rf is a column in an embedding matrix D ∈ RV ×f . We also equip our model with a sense of order by embedding the absolute position of input elements p = (p 1 , . . . , pm ) where p j ∈ Rf . Both are combined to obtain input element representations e = (w 1 + p 1 , . . . , w m + pm ). We proceed similarly for output elements that were already generated by the decoder network to yield output element representations that are being fed back into the decoder network g = (g 1 , . . . , g n ). Position embeddings are useful in our architecture since they give our model a sense of which portion of the sequence in the input or output it is currently dealing with ( §5.4).
section: Convolutional Block Structure
Both encoder and decoder networks share a simple block structure that computes intermediate states based on a fixed number of input elements. We denote the output of the lth block ash l = (h l 1 , . . . , h l n ) for the decoder network, and z l = (z l 1 , . . . , z l m ) for the encoder network; we refer to blocks and layers interchangeably. Each block contains a one dimensional convolution followed by a non-linearity. For a decoder network with a single block and kernel width k, each resulting state h 1 i contains information over k input elements. Stacking several blocks on top of each other increases the number of input elements represented in a state. For instance, stacking 6 blocks with k = 5 results in an input field of 25 elements, i.e. each output depends on 25 inputs. Non-linearities allow the networks to exploit the full input field, or to focus on fewer elements if needed.
Each convolution kernel is parameterized as W ∈ R 2d×kd , b w ∈ R 2d and takes as input X ∈ R k×d which is a concatenation of k input elements embedded ind dimensions and maps them to a single output element Y ∈ R 2d that has twice the dimensionality of the input elements; subsequent layers operate over the k output elements of the previous layer. We choose gated linear units (GLU; as non-linearity which implement a simple gating mechanism over the output of the convolu-
where A, B ∈ Rd are the inputs to the non-linearity, ⊗ is the point-wise multiplication and the output v([A B]) ∈ Rd is half the size of Y . The gates σ(B) control which inputs A of the current context are relevant. A similar nonlinearity has been introduced in who apply tanh to A but shows that GLUs perform better in the context of language modelling.
To enable deep convolutional networks, we add residual connections from the input of each convolution to the output of the block (.
For encoder networks we ensure that the output of the convolutional layers matches the input length by padding the input at each layer. However, for decoder networks we have to take care that no future information is available to the decoder (). Specifically, we pad the input by k − 1 elements on both the left and right side by zero vectors, and then remove k elements from the end of the convolution output.
We also add linear mappings to project between the embedding size f and the convolution outputs that are of size 2d.
We apply such a transform tow when feeding embeddings to the encoder network, to the encoder output z u j , to the final layer of the decoder just before the softmax h L , and to all decoder layers h l before computing attention scores (1).
Finally, we compute a distribution over the T possible next target elements y i+1 by transforming the top decoder output h Li via a linear layer with weights W o and bias b o :
section: Multi-step Attention
We introduce a separate attention mechanism for each decoder layer. To compute the attention, we combine the current decoder state h l i with an embedding of the previous. Illustration of batching during training. The English source sentence is encoded (top) and we compute all attention values for the four German target words (center) simultaneously. Our attentions are just dot products between decoder context representations (bottom left) and encoder representations. We add the conditional inputs computed by the attention (center right) to the decoder states which then predict the target words (bottom right). The sigmoid and multiplicative boxes illustrate Gated Linear Units.
target element g i :
For decoder layer l the attention a l ij of state i and source element j is computed as a dot-product between the decoder state summary d l i and each output z u j of the last encoder block u:
The conditional input cl i to the current decoder layer is a weighted sum of the encoder outputs as well as the input element embeddings e j, center right):
This is slightly different to recurrent approaches which compute both the attention and the weighted sum over z u j only. We found adding e j to be beneficial and it resembles key-value memory networks where the keys are the z u j and the values are the z u j + e j (. Encoder outputs z u j represent potentially large input contexts and e j provides point information about a specific input element that is useful when making a prediction. Once cl i has been computed, it is simply added to the output of the corresponding decoder layer h l i . This can be seen as attention with multiple 'hops') compared to single step attention (). In particular, the attention of the first layer determines a useful source context which is then fed to the second layer that takes this information into account when computing attention etc. The decoder also has immediate access to the attention history of the k − 1 previous time steps because the conditional inputs
which are input to h l i . This makes it easier for the model to take into account which previous inputs have been attended to already compared to recurrent nets where this information is in the recurrent state and needs to survive several non-linearities. Overall, our attention mechanism considers which words we previously attended to () and performs multiple attention 'hops' per time step. In Appendix §C, we plot attention scores fora deep decoder and show that at different layers, different portions of the source are attended to.
Our convolutional architecture also allows to batch the attention computation across all elements of a sequence compared to RNNs, middle). We batch the computations of each decoder layer individually.
section: Normalization Strategy
We stabilize learning through careful weight initialization ( §3.5) and by scaling parts of the network to ensure that the variance throughout the network does not change dramatically. In particular, we scale the output of residual blocks as well as the attention to preserve the variance of activations. We multiply the sum of the input and output of a residual block by √ 0.5 to halve the variance of the sum. This assumes that both summands have the same variance which is not always true but effective in practice.
The conditional input cl i generated by the attention is a weighted sum of m vectors (2) and we counteract a change in variance through scaling by m 1/m; we multiply by m to scale up the inputs to their original size, assuming the attention scores are uniformly distributed. This is generally not the case but we found it to work well in practice.
For convolutional decoders with multiple attention, we scale the gradients for the encoder layers by the number of attention mechanisms we use; we exclude source word embeddings. We found this to stabilize learning since the encoder received too much gradient otherwise.
section: Initialization
Normalizing activations when adding the output of different layers, e.g. residual connections, requires careful weight initialization. The motivation for our initialization is the same as for the normalization: maintain the variance of activations throughout the forward and backward passes. All embeddings are initialized from a normal distribution with mean 0 and standard deviation 0.1. For layers whose output is not directly fed to a gated linear unit, we initialize weights from N (0, 1/n l ) where n l is the number of input connections to each neuron. This ensures that the variance of a normally distributed input is retained.
For layers which are followed by a GLU activation, we propose a weight initialization scheme by adapting the derivations in. If the GLU inputs are distributed with mean 0 and have sufficiently small variance, then we can approximate the output variance with 1/4 of the input variance (Appendix A.1). Hence, we initialize the weights so that the input to the GLU activations have 4 times the variance of the layer input. This is achieved by drawing their initial values from N (0, 4/n l ). Biases are uniformly set to zero when the network is constructed.
We apply dropout to the input of some layers so that inputs are retained with a probability of p. This can be seen as multiplication with a Bernoulli random variable taking value 1/p with probability p and 0 otherwise (). The application of dropout will then cause the variance to be scaled by 1/p. We aim to restore the incoming variance by initializing the respective layers with larger weights. Specifically, we use N (0, 4p/n l ) for layers whose output is subject to a GLU and N (0, p/n l ) otherwise (Appendix A.3).
section: Experimental Setup
section: Datasets
We consider three major WMT translation tasks as well as a text summarization task.
WMT'16 English-Romanian. We use the same data and pre-processing as but remove sentences with more than 175 words. This results in 2.8M sentence pairs for training and we evaluate on newstest2016. We experiment with word-based models using a source vocabulary of 200K types and a target vocabulary of 80K types. We also consider a joint source and target byte-pair encoding (BPE) with 40K types (.
WMT'14 English-German. We use the same setup as which comprises 4.5M sentence pairs for training and we test on newstest2014. As vocabulary we use 40K sub-word types based on BPE.
WMT'14 English-French. We use the full training set of 36M sentence pairs, and remove sentences longer than 175 words as well as pairs with a source/target length ratio exceeding 1.5. This results in 35.5M sentence-pairs for training. Results are reported on newstest2014. We use a source and target vocabulary with 40K BPE types.
In all setups a small subset of the training data serves as validation set (about 0.5-1% for each dataset) for early stopping and learning rate annealing.
Abstractive summarization. We train on the Gigaword corpus () and pre-process it identically to resulting in 3.8M training examples and 190K for validation. We evaluate on the DUC-2004 test data comprising 500 article-title pairs and report three variants of recall-based ROUGE), namely, ROUGE-1 (unigrams), ROUGE-2 (bigrams), and ROUGE-L (longest-common substring). We also evaluate on a Gigaword test set of 2000 pairs which is identical to the one used by and we report F1 ROUGE similar to prior work. Similar to we use a source and target vocabulary of 30K words and require outputs to beat least 14 words long.
section: Model Parameters and Optimization
We use 512 hidden units for both encoders and decoders, unless otherwise stated. All embeddings, including the output produced by the decoder before the final linear layer, have dimensionality 512; we use the same dimensionalities for linear layers mapping between the hidden and embedding sizes ( §3.2).
We train our convolutional models with Nesterov's accelerated gradient method (Sutskever et al., 2013) using a momentum value of 0.99 and renormalize gradients if their norm exceeds 0.1 (). We use a learning rate of 0.25 and once the validation perplexity stops improving, we reduce the learning rate by an order of magnitude after each epoch until it falls below 10 −4 .
Unless otherwise stated, we use mini-batches of 64 sentences. We restrict the maximum number of words in a mini-batch to make sure that batches with long sentences backtranslations/en-ro.
3 http://nlp.stanford.edu/projects/nmt still fit in GPU memory. If the threshold is exceeded, we simply split the batch until the threshold is met and process the parts separatedly. Gradients are normalized by the number of non-padding tokens per mini-batch. We also use weight normalization for all layers except for lookup tables.
Besides dropout on the embeddings and the decoder output, we also apply dropout to the input of the convolutional blocks (). All models are implemented in Torch (Collobert et al., 2011) and trained on a single Nvidia M40 GPU except for WMT'14 EnglishFrench for which we use a multi-GPU setup on a single machine. We train on up to eight GPUs synchronously by maintaining copies of the model on each card and split the batch so that each worker computes 1/8-th of the gradients; at the end we sum the gradients via Nvidia NCCL.
section: Evaluation
We report average results over three runs of each model, where each differs only in the initial random seed. Translations are generated by abeam search and we normalize log-likelihood scores by sentence length. We use abeam of width 5. We divide the log-likelihoods of the final hypothesis in beam search by their length |y|. For WMT'14 English-German we tune a length normalization constant on a separate development set (newstest2015) and we normalize log-likelihoods by |y| α (). On other datasets we did not find any benefit with length normalization.
For word-based models, we perform unknown word replacement based on attention scores after generation (Jean et al., 2015). Unknown words are replaced by looking up the source word with the maximum attention score in a precomputed dictionary. If the dictionary contains no translation, then we simply copy the source word. Dictionaries were extracted from the word aligned training data that we obtained with fast align. Each source word is mapped to the target word it is most frequently aligned to. In our multi-step attention ( §3.3) we simply average the attention scores overall layers. Finally, we compute case-sensitive tokenized BLEU, except for WMT'16 English-Romanian where we use detokenized BLEU to be comparable with Sennrich et al. (2016b).
section: Results
section: Recurrent vs. Convolutional Models
We first evaluate our convolutional model on three translation tasks. On WMT'16 English-Romanian translation we compare to which is the winning entry on this language pair at WMT'16 (. Their model implements the attention-based sequence to sequence architecture of and uses GRU cells both in the encoder and decoder. We test both word-based and BPE vocabularies ( §4). shows that our fully convolutional sequence to sequence model (ConvS2S) outperforms the WMT'16 winning entry for English-Romanian by 1.9 BLEU with a BPE encoding and by 1.3 BLEU with a word factored vocabulary. This instance of our architecture has 20 layes in the encoder and 20 layers in the decoder, both using kernels of width 3 and hidden size 512 throughout. Training took between 6 and 7.5 days on a single GPU. The results show that our convolutional model outpeforms GNMT by 0.5 BLEU. Our encoder has 15 layers and the decoder has 15 layers, both with 512 hidden units in the first ten layers and 768 units in the subsequent three layers, all using kernel width 3. The final two layers have 2048 units which are just linear mappings with a single input. We trained this model on a single GPU over a period of 18.5 days with a batch size of 48. LSTM sparse mixtures have shown strong accuracy at 26.03 BLEU fora single run) which compares to 25.39 BLEU for our best run. This mixture sums the output of four experts, not unlike an ensemble which sums the output of multiple networks. ConvS2S also benefits from ensembling ( §5.2), therefore mixtures area promising direction.
Finally, we train on the much larger WMT'14 EnglishFrench task where we compare to the state of the art result of GNMT (. Our model is trained with a simple token-level likelihood objective and we improve over GNMT in the same setting by 1.6 BLEU on average. We also outperform their reinforcement (RL) models by 0.5 We did not use the exact same vocabulary size because word pieces and BPE estimate the vocabulary differently.  The translations produced by our models often match the length of the references, particularly for the large WMT'14 English-French task, or are very close for small to medium data sets such as WMT'14 English-German or WMT'16 English-Romanian.
section: WMT'16 English-Romanian BLEU
section: Ensemble Results
Next, we ensemble eight likelihood-trained models for both WMT'14 English-German and WMT'14 English-French and compare to previous work which also reported ensemble results. For the former, we also show the result when ensembling 10 models. shows that we outperform the best current ensembles on both datasets.
section: Generation Speed
Next, we evaluate the inference speed of our architecture on the development set of the WMT'14 English-French task which is the concatenation of newstest2012 and newstest2013; it comprises 6003 sentences. We measure generation speed both on GPU and CPU hardware. Specifically, we measure GPU speed on three generations of Nvidia cards: a GTX-1080ti, an M40 as well as an older K40 card. CPU timings are measured on one host with 48 hyperthreaded cores (Intel Xeon E5-2680 @ 2.50GHz) with 40 workers. In all settings, we batch up to 128 sentences, composing batches with sentences of equal length. Note that the majority of batches is smaller because of the small size of the development set. We experiment with beams of size 5 as well as greedy search, i.e beam of size 1. To make generation fast, we do not recompute convolution states that have not changed compared to the previous time step but rather copy (shift) these activations.
We compare to results reported in who  use Nvidia K80 GPUs which are essentially two K40s. We did not have such a GPU available and therefore run experiments on an older K40 card which is inferior to a K80, in addition to the newer M40 and GTX-1080ti cards. The results show that our model can generate translations on a K40 GPU at 9.3 times the speed and 2.25 higher BLEU; on an M40 the speed-up is up to 13.7 times and on a GTX-1080ti card the speed is 21.3 times faster. A larger beam of size 5 decreases speed but gives better BLEU.
On CPU, our model is up to 9.3 times faster, however, the GNMT CPU results were obtained with an 88 core machine whereas our results were obtained with just over half the number of cores. On a per CPU core basis, our model is 17 times faster at a better BLEU. Finally, our CPU speed is 2.7 times higher than GNMT on a custom TPU chip which shows that high speed can be achieved on commodity hardware. We do no report TPU figures as we do not have access to this hardware.
section: Position Embeddings
In the following sections, we analyze the design choices in our architecture. The remaining results in this paper are based on the WMT'14 English-German task with 13 encoder layers at kernel size 3 and 5 decoder layers at kernel size 5. We use a target vocabulary of 160K words as well as vocabulary selection ( to decrease the size of the output layer which speeds up training and testing. The average vocabulary size for each training batch is about 20K target words. All figures are averaged over three runs ( §4) and BLEU is reported on newstest2014 before unknown word replacement.
We start with an experiment that removes the position em-
section: PPL BLEU
section: ConvS2S
6.64 21.7 -source position 6.69 21.3 -target position 6.63 21.5 -source & target position 6.68
21.. Effect of removing position embeddings from our model in terms of validation perplexity (valid PPL) and BLEU.
beddings from the encoder and decoder ( §3.1). These embeddings allow our model to identify which portion of the source and target sequence it is dealing with but also impose a restriction on the maximum sentence length. shows that position embeddings are helpful but that our model still performs well without them. Removing the source position embeddings results in a larger accuracy decrease than target position embeddings. However, removing both source and target positions decreases accuracy only by 0.5 BLEU. We had assumed that the model would not be able to calibrate the length of the output sequences very well without explicit position information, however, the output lengths of models without position embeddings closely matches models with position information. This indicates that the models can learn relative position information within the contexts visible to the encoder and decoder networks which can observe up to 27 and 25 words respectively.
Recurrent models typically do not use explicit position embeddings since they can learn where they are in the sequence through the recurrent hidden state computation. In our setting, the use of position embeddings requires only a simple addition to the input word embeddings which is a negligible overhead.
section: Multi-step Attention
The multiple attention mechanism ( §3.3) computes a separate source context vector for each decoder layer. The computation also takes into account contexts computed for preceding decoder layers of the current time step as well as previous time steps that are within the receptive field of the decoder. How does multiple attention compare to attention in fewer layers or even only in a single layer as is usual? shows that attention in all decoder layers achieves the best validation perplexity (PPL). Furthermore, removing more and more attention layers decreases accuracy, both in terms of BLEU as well as PPL.
The computational overhead for attention is very small compared to the rest of the network. Training with attention in all five decoder layers processes 3624 target words per second on average on a single GPU, compared to 3772 words per second for attention in a single layer. This is only   a 4% slowdown when adding 4 attention modules. Most neural machine translation systems only use a single module. This demonstrates that attention is not the bottleneck in neural machine translation, even though it is quadratic in the sequence length (cf.. Part of the reason for the low impact on speed is that we batch the computation of an attention module overall target words, similar to. However, for RNNs batching of the attention maybe less effective because of the dependence on the previous time step.
section: Kernel size and Depth
Figure 2 shows accuracy when we change the number of layers in the encoder or decoder. The kernel width for layers in the encoder is 3 and for the decoder it is 5. Deeper architectures are particularly beneficial for the encoder but less so for the decoder. Decoder setups with two layers already perform well whereas for the encoder accuracy keeps increasing steadily with more layers until up to 9 layers when accuracy starts to plateau.
section: DUC-2004 Gigaword RG-1 (R) RG-2 (R) RG-L (R) RG-1 (F) RG-2 (F) RG-L (F)
RNN MLE ( 24    Aside from increasing the depth of the networks, we can also change the kernel width. shows that encoders with narrow kernels and many layers perform better than wider kernels. These networks can also be faster since the amount of work to compute a kernel operating over 3 input elements is less than half compared to kernels over 7 elements. We see a similar picture for decoder networks with large kernel sizes. shows that context sizes of 20 words are often sufficient to achieve very good accuracy on language modeling for English.
section: Summarization
Finally, we evaluate our model on abstractive sentence summarization which takes along sentence as input and outputs a shortened version. The current best models on this task are recurrent neural networks which either optimize the evaluation metric or address specific problems of summarization such as avoiding repeated generations. We use standard likelhood training for our model and a simple model with six layers in the encoder and decoder each, hidden size 256, batch size 128, and we trained on a single GPU in one night. shows that our likelhood trained model outperforms the likelihood trained model (RNN MLE) of and is not far behind the best models on this task which benefit from task-specific optimization and model structure. We expect our model to benefit from these improvements as well.
section: Conclusion and Future Work
We introduce the first fully convolutional model for sequence to sequence learning that outperforms strong recurrent models on very large benchmark datasets at an order of magnitude faster speed. Compared to recurrent networks, our convolutional approach allows to discover compositional structure in the sequences more easily since representations are built hierarchically. Our model relies on gating and performs multiple attention steps.
We achieve anew state of the art on several public translation benchmark data sets. On the WMT'16 EnglishRomanian task we outperform the previous best result by 1.9 BLEU, on WMT'14 English-French translation we improve over the LSTM model of Wu et al. (2016) by 1.6 BLEU in a comparable setting, and on WMT'14 EnglishGerman translation we ouperform the same model by 0.5 BLEU. In future work, we would like to apply convolutional architectures to other sequence to sequence learning problems which may benefit from learning hierarchical representations as well.
section: A. Weight Initialization
We derive a weight initialization scheme tailored to the GLU activation function similar to; by focusing on the variance of activations within the network for both forward and backward passes. We also detail how we modify the weight initialization for dropout.
section: A.1. Forward Pass
Assuming that the inputs x l of a convolutional layer land its weights W l are independent and identically distributed (i.i.d.), the variance of its output, computed as
where n l is the number inputs to the layer. For onedimensional convolutional layers with kernel width k and input dimension c, this is kc. We adopt the notation in (), i.e. y l , w land x l represent the random variables in y l , W land x l . With w land x l independent from each other and normally distributed with zero mean, this amounts to
x l is the result of the GLU activation function
With x ∼ N (0, std(x)), this yields
With
We initialize the embedding matrices in our network with small variances (around 0.01), which allows us to dismiss the quadratic term and approximate the GLU output variance with
If L network layers of equal size and with GLU activations are combined, the variance of the final output y L is given by
Following, we aim to satisfy the condition 1 4 n l V ar w l = 1, ∀l
so that the activations in a network are neither exponentially magnified nor reduced. This is achieved by initializing W l from N (0, 4/n l ). and 6 exhibit a linear alignment. The first layer shows the clearest alignment, although it is slightly off and frequently attends to the corresponding source word of the previously generated target word. Layer 2 and 8 lack a clear structure and are presumably collecting information about the whole source sentence. The fourth layer shows high alignment scores on nouns such as "festival", "way" and "work" for both the generated target nouns as well as their preceding words. Note that in German, those preceding words depend on gender and object relationship of the respective noun. Finally, the attention scores in layer 5 and 7 focus on "built", which is reordered in the German translation and is moved from the beginning to the very end of the sentence. One interpretation for this is that as generation progresses, the model repeatedly tries to perform the re-ordering. "aufgebaut" can be generated after a noun or pronoun only, which is reflected in the higher scores at positions 2, 5, 8, 11 and 13.
