section: title
Attention-Based Convolutional Neural Network for Semantic Relation Extraction
section: abstract
Nowadays, neural networks play an important role in the task of relation classification. In this paper, we propose a novel attention-based convolutional neural network architecture for this task. Our model makes full use of word embedding, part-of-speech tag embedding and position embedding information. Word level attention mechanism is able to better determine which parts of the sentence are most influential with respect to the two entities of interest. This architecture enables learning some important features from task-specific labeled data, forgoing the need for external knowledge such as explicit dependency structures. Experiments on the SemEval-2010 Task 8 benchmark dataset show that our model achieves better performances than several state-of-the-art neural network models and can achieve a competitive performance just with minimal feature engineering.
section: Introduction
Classifying the relation between two entities in a given context is an important task in natural language processing (NLP). Take the following sentence as an example:
Jewelry and other smaller e 1 valuables /e 1 were locked in a e 2 safe /e 2 or a closet with a dead-bolt.
Here, the marked entities "valuables" and "safe" are of the relation "Content-Container(e1; e2)". Relation classification plays a key role in various NLP applications, and has become a hot research topic in recent years. Various machine learning based relation classification methods have been proposed for the task, based on either human-designed features), or kernels). Some researchers also employed the existing known facts to label the text corpora via distant supervision ().
All of these approaches are effective because they leverage a large body of linguistic knowledge. However, these methods may suffer from two limitations. First, the extracted features or elaborately designed kernels are often derived from the output of pre-existing NLP systems, which leads to the propagation of the errors in the existing tools and hinders the performance of such systems. Second, the methods mentioned above do not scale well during relation extraction, which makes it very hard to engineer effective task-specific features and learn parameters.
Recently, neural network models have been increasingly focused on for their ability to minimize the effort in feature engineering of NLP tasks). Moreover, some researchers have also paid attention to feature learning of neural networks in the field of relation extraction. () introduced a recursive neural network model to learn compositional vector representations for phrases and sentences of arbitrary syntactic types and length. () utilized convolutional neural networks (CNNs) for relation classification.
() applied long short term memory (LSTM)-based recurrent neural networks (RNNs) along the shortest dependency path.
We have noticed that these neural models are all designed as the way that all words are equally important in the sentence, and contribute equally to the representation of the sentence meaning. However, various situations have shown that it is not always the case. For example, "The e 1 women /e 1 that caused thee 2 accident /e 2 was on the cellphone and ran thru the intersection without pausing on the median.", where the type of relation is "Cause-Effect(e2,e1)".
Obviously, not all words contribute equally to the representation of the semantic relation. In this sentence, "caused" is of particular significance in determining the relation "Cause-Effect", but "phone" is less correlated with the semantic of the relation of "Cause-Effect". So how to identify critical cues which determine the primary semantic information is an important task.
If the relevance of words with respect to the target entities is effectively captured, we can find critical words which determine the semantic information. Hence, we propose to introduce the attention mechanism into a convolution neural network (CNN) to extract the words that are important to the meaning of the sentence and aggregate the representation of those informative words to form a sentence vector. The key contributions of our approach are as follows:
1. We propose a novel convolution neural network architecture that encodes the text segment to its semantic representation. Compared to existing neural relation extraction models, our model can make full use of the word embedding, part-of-speech tag embedding and position embedding.
2. Our convolution neural network architecture relies on the word level attention mechanism to choose important information for the semantic representation of the relation. This makes it possible to detect more subtle cues despite the heterogeneous structure of the input sentences, enabling it to automatically learn which parts are relevant to the given class.
3. Experiments on the SemEval-2010 Task 8 benchmark dataset show that our model achieves better performance with an F1 score of 85.9% than previous neural network models, and can achieve a competitive performance with an F1 score of 84.3% just with minimal feature engineering.
section: Related Works
A variety of learning paradigms have been applied to relation extraction. As mentioned earlier, supervised methods have shown to perform well in this task. In the supervised paradigm, relation classification is considered as a multi-classification problem, and researchers concentrate on extracting complex features, either feature-based or kernel-based.) converted the classification clues (such as sequences and parse trees) into feature vectors. Various kernels, such as the convolution tree kernel (, subsequence kernel (Mooney and ) and dependency tree kernel ( ), have been proposed to solve the relation classification problem.) introduced semantic information into kernel methods in addition to considering structural information only. However, the reliance on manual annotation, which is expensive to produce and thus limited in quantity has provided the impetus for distant-supervision (.
With the recent revival of interest in deep neural networks, many researchers have concentrated on using deep networks to learn features. In NLP, such methods are primarily based on learning a distributed representation for each word, which is also called a word embedding (.) presented a recursive neural network (RNN) for relation classification to learn vectors in the syntactic tree path connecting two nominals to determine their semantic relationship. () also employed a neural relation extraction model allowing for the explicit weighting of important phrases for the target task. () exploited a convolutional deep neural network to extract lexical and sentence level features. These two levels of features were concatenated to form the final feature vector. ( posed the attention mechanism in machine translation task, which is also the first use of it in natural language processing. This attention mechanism is used to select the reference words in the original language for words in the foreign language before translation. () used the attention mechanism in image caption generation to select the relevant image regions when generating words in the captions.) introduced attention mechanism into relation classification which relied on two levels of attention for pattern extraction. In this paper, we will explore the word level attention mechanism in order to discover better patterns in heterogeneous contexts for the relation classification task.
section: Methodology
Given a set of sentences x 1 , x 2 , ...x n and two corresponding entities, our model measures the probability of each relation r. The architecture of our proposed method is shown in. Here, feature extraction is the main component, which is composed of sentence convolution and attention-based context selection. After feature extraction, two kinds of vectors -the sentence convolution vector and the attention-based context vector, are generated for semantic relation classification.
• Sentence Convolution: Given a sentence and two target entities, a convolutional neutral network (CNN) is used to construct a distributed representation of the sentence.
• Attention-based Context Selection: We use word-level attention to select relevant words with respect to the target entities.
section: Sentence Convolution
section: Input of Model
Word Embeddings. shows the architecture of our convolution neural network. In the word representation layer, each input word token is transformed into a vector by looking up word embeddings.  Position Embeddings. In the task of relation extraction, the words close to the target entities are usually more informative in determining the relation between entities. Similar to (), we use position embeddings specified by entity pairs. It can help the CNN to keep track of how close each word is to the head or the tail entity, which is defined as the combination of the relative distances from the current word to the head or the tail entity. For example, "The e 1 game /e 1 was sealed in the original e 2 packing /e 2 unopened and untouched."
In this sentence, the relative distance from the word "sealed" to the head entity "game" is 2 and the tail entity "packing" is −4. According to the above rule, we can obtain the relative distance from every word in the above sentence to each entity. We first create two relative distance files of entity e 1 and entity e 2 . Then, we use the CBOW model to pretrain position embeddings on two relative distance files respectively (). The dimension of position embedding is set 5.
Part-of-speech tag Embeddings. Our word embeddings are obtained from the Google News corpus, which is slightly different to the relation classification corpus. We deal with this problem by allying each input word with its POS tag to improve the robustness. In our experiment, we only take into use a coarsegrained POS category, containing 15 different tags. We use the Stanford CoreNLP Toolkit to obtain the part-of-speech tagging () . Then we pretrain the embeddings by the CBOW model on the taggings, and the dimension of part-of-speech tag embedding is set 10.
Finally, we concatenate the word embedding, position embedding, and part-of-speech tag embedding of each word and denote it as a vector of sequence w = [W F, pF, P OSF ].
section: Convolution, Max-pooling and Non-linear Layers
In relation extraction, one of the main challenges is that, the length of the sentences is variable and important information can appear anywhere. Hence, we should merge all local features and perform relation prediction globally. Here, we use a convolutional layer to merge all these features. The convolutional layer first extracts local features with a sliding window of length lover the sentence. We assume that the length of the sliding window l is 3. Then, it combines all local features via a max-pooling operation to obtain a fixed-sized vector for the input sentence. Since the window maybe outside of the sentence boundaries when it slides near the boundary, we set special padding tokens for the sentence. It means that we regard all out-of-range input vectors w i (i < 1 or i > m) as zero vector. Let xi ∈ R k be the k-dimensional input vector corresponding to the ith word in the sentence. A sentence of length n (padded where necessary) is represented as:
where ⊕ is the concatenation operator. Let x i:i+j refer to the concatenation of words xi , x i+1 , ..., x i+j . A convolution operation involves a filter w ∈ R hk , which is applied to a window of h words to produce anew feature. For example, a feature c i is generated from a window of words x i:i+h−1 by
Here f is a non-linear function such as the hyperbolic tangent. This filter is applied to each possible window of words in the sentence {x 1:h , x 2:h+1 , ..., x n−h+1:n } to produce a feature map:
with c ∈ R n−h+1 . We then apply a max-overtime pooling operation over the feature map and take the maximum valuê c = max{c} as the feature. The idea is to capture the most important feature -one with the highest value -for each feature map. This pooling scheme naturally deals with variable sentence lengths.
section: Attention-based Context Selection
Our attention model is applied to a rather different kind of scenario, which consist of heterogeneous objects, namely a sentence and two entities. So we seek to give our model the capability to determine which parts of the sentence are most influential with respect to the two entities of interest. For instance, "That coupled with thee 1 death /e 1 and destruction caused by thee 2 storm /e 2 was a very traumatic experience for these residents.".
Here, the type of relation is "Cause-Effect(e2,e1)". In this sentence, the non-entity word "caused" is of particular significance in determining the relation "Cause-Effect". Fortunately, we can exploit the fact that there is a salient connection between "caused" and "death". We introduce a word attention mechanism to quantitatively model such contextual relevance of words with respect to the target entities.
In order to calculate the weight of each word in the sentence, we need to feed each word in the sentence and each entity to a multilayer perceptron (MLP). The network structure of the attention weight computation is shown in.
Assume that each sentence contains T words. wit with t ∈ [1, T ] represents the words in the ith sentence. e ij with j ∈ represents the jth entity in the ith sentence. We concatenate the representation of entity e ij and the representation of word wit to get anew representation of word t, i.e., h j it = [w it , e ij ]. u j it quantifies the degree of relevance of the tth word with respect to the jth entity in the ith sentence. This relevance scoring function is computed by the MLP network between the respective embeddings of the word wit and the entity e ij . We named the degree of relevance as the word attention weight, namely, u j it . The calculation procedure of u j it is as follows:
The output of the attention MLP network is u j it . Now we can get a normalized importance weight α j it through a softmax function.
The architecture of our proposed attention layer is shown in. After that, we compute the sentence context vector s ij about entity j as a weighted sum of the word in the sentence i based on the weights as follows:
The context vector s ij can be seen as a high level representation of a fixed query "what is the informative word" over the words. The weight of attention MLP network is randomly initialized and jointly learned during the training process.
section: MLP Layer
At last, we can obtain the output of three networks, which includes the result of convolution network, and the sentence context vectors of the two entities. We then concatenate all three output vectors into a fixed-length feature vector.
The fixed length feature vector is fed to a multi-layer perceptron (MLP), which is shown in. More specifically, first, the vector obtained is fed into a full connection hidden layer to get a more abstractive representation, and then, this abstractive representation is connected to the output layer. For the task of classification, the outputs are the probabilities of different classes, which is computed by a softmax function after the fully-connected layer. We name the entire architecture of our model Attention-CNN.
section: Model Training
The relation classification model proposed here using attention-based convolutional neural network could be stated as a parameter vector θ. To obtain the conditional probability p(i|x, θ), we apply a softmax operation overall relation types:
Given all the T training examples (x (i) ; y (i) ), we can then write down the log likelihood of the parameters as follows:
To compute the network parameter of θ, we maximize the log likelihood J using stochastic gradient descent (SGD). θ are randomly initialized. We implement the back-propagation algorithm and apply the following update rule:
Minibatch size 32 Word embedding size 300 Word Position Embedding size 5 Part-of-speech tag Embeddings 10 Word Window size 3 Convolution size 100 Learning rate 0.02: Hyperparameters of our model
section: Experiments
section: Dataset and Evaluation Metrics
We evaluated our model on the SemEval-2010 Task 8 dataset, which is an established benchmark for relation classification). The dataset contains 8000 sentences for training, and 2717 for testing. We split 1000 samples out of the training set for validation. The dataset distinguishes 10 relations, and the former 9 relations are directed, whereas the "Other" class is undirected. In our experiments, We do not distinguish the direction of the relationship. To compare our results with those obtained in previous studies, we adopt the macro-averaged F1-score in our following experiments.
section: Parameter Settings
In this section, we experimentally study the effects of different kinds of parameters in our proposed method: Word embedding size, Word Position Embedding size, Word Window size, Convolution size, Learning rate, and Minibatch size. For the initialization of the word embeddings used in our model, we use the publicly available word2vec vectors that were trained on 100 billion words from Google News. Words not present in the set of pre-trained words are initialized randomly. The other parameters are initialized by randomly sampling from the uniform distribution in [-0.1,0.1].
section: Model
Feature  For other hyperparameters of our proposed model, we take those hyperparameters that achieved the best performance on the development set. The final hyper-parameters are shown in.
section: Results of Comparison Experiments
To evaluate the performance of our automatically learned features, we select six approaches as competitors to be compared with our method.). All of the above models adopt word embedding as representation except SVM. For fair comparison among the different model, we also add two types of lexical features, WordNet hypernyms and words around nominals, as part of the fixed length feature vector to the MLP layer.
We can observe in that, Attention-CNN, without extra lexical features such as WordNet and words around nominals, still outperforms previously reported best systems of CR-CNN and SDP-LSTM with F1 of 83.7%, though both of which have taken extra lexical features into account. It shows that our method can learn a robust and effective relation representation. When added with the same lexical features, our Attention-CNN model obtains the result of 85.9%, significantly better than CR-CNN and SDP-LSTM. In general, richer feature sets lead to better performance. Such neural models as RNN, MVRNN, CR-CNN and SDP-LSTM can automatically learn valuable features, and all of these models heavily depend on the result of the syntactic parsing. However, the error of syntactic parsing will inevitably inhibit the ability of these methods to learn high quality features.
Similarly, Attention-CNN, CNN, and CR-CNN all apply convolution neural network to the extraction of sentence features, but we can see from that Attention-CNN yield a better performance of 84.3%, compared with CNN and CR-CNN. One of the reason is that the input of the three models are different. Our model uses word embeddings, position embeddings, part-of-speech embeddings as input. CNN also leverages position embeddings and lexical features. CR-CNN makes use of heterogeneous information along the shortest dependency path between two entities. Our experiments verify that the part-of-speech embeddings used by us contain rich semantic information. On the other hand, our proposed Attention-CNN model can still yield higher F1 without prior NLP knowledge. The reason should be due to that word level attention mechanism is able to better choose which parts of the sentence are more discriminative with respect to the two entities of interest.
section: Feature Sets
section: Effect of Different Feature Component
Our network model primarily contains four sets of features, "Word Embeddings (WF)","Position Embeddings (pF)","Part-of-speech tag Embeddings (POSF)", and "Word Attention (WA)". We performed ablation tests on the four sets of features in to determine which type of features contributed the most. From the results we can observe that our learned position embedding features are effective for relation classification. The F1-score is improved remarkably when position embedding features are added. POS tagging embeddings are comparatively more informative, which can boost the F1 by 1.9%. The system achieves approximately 2.3% improvements when adding Word Attention. When all features are combined, we achieve the best result of 85.9%.
section: Visualization of Attention
In order to validate whether our model is able to select informative words in a sentence or not, we visualize the word attention layers in for several data from test sets.
Every line in shows a sentence. The size of a word denotes the importance of it. We normalize the word weight to make sure that only important words are emphasized. Given the following sentence as an example, "The burst has been caused by water hammer pressure." we can find that the word "caused" was assigned the highest attention score, while words such as "burst" and "pressure" also are important. This makes sense in light of the ground-truth labeling as a "Cause-Effect" relationship. Additionally, we observe that words like "The", "has" and "by" have low attention scores. These are indeed rather irrelevant with respect to the "Component-Whole" relationship.
section: Conclusion
In this paper, we propose an attention-based convolutional neural network architecture for semantic relation extraction. Here, the convolutional neural network architecture is used to extract the features
section: Relation
section: Representation of Word Attention Weight
Instrument-Agency The author of a keygen uses a disassembler to look at the raw assembly code
section: Message-Topic
The Pulitzer Committee issues an official citation explaining the reasons for the award
section: Cause-Effect
The burst has been caused by water hammer pressure Instrument-Agency Even commercial networks have moved into high-definition broadcast Component-Whole The girl showed a photo of apple tree blossom on a fruit tree in the Central Valley Member-Collection They tried an assault of their own an hour later, with two columns of sixteen tanks backed by a battalion of Panzer grenadiers of the sentence. Our model can make full use of word embedding, part-of-speech tag embedding and position embedding information. Meanwhile, word level attention mechanism is able to better determine which parts of the sentence are most influential with respect to the two entities of interest. Experiments on the SemEval-2010 Task 8 benchmark dataset show that our model achieves better performances than several state-of-the-art systems.
In the future, we will focus on exploring better neural network structure about feature extraction in relation extraction. Meanwhile, because end-to-end relation extraction is also an important problem, we will seek better methods for completing entity and relation extraction jointly.
