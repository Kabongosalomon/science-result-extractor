section: title
ROBUST DIALOG STATE TRACKING USING DELEXICALISED RECURRENT NEURAL NETWORKS AND UNSUPERVISED ADAPTATION
section: abstract
Tracking the user's intention throughout the course of a dialog , called dialog state tracking, is an important component of any dialog system. Most existing spoken dialog systems are designed to work in a static, well-defined domain, and are not well suited to tasks in which the domain may change or be extended overtime. This paper shows how recurrent neu-ral networks can be effectively applied to tracking in an extended domain with new slots and values not present in training data. The method is evaluated in the third Dialog State Tracking Challenge, where it significantly outperforms other approaches in the task of tracking the user's goal. A method for online unsupervised adaptation to new domains is also presented. Unsupervised adaptation is shown to be helpful in improving word-based recurrent neural networks, which work directly from the speech recognition results. Word-based dialog state tracking is attractive as it does not require engineering a spoken language understanding system for use in the new domain and it avoids the need fora general purpose intermediate semantic representation. Index Terms-Dialog state tracking, dialog systems, spoken language understanding.
section: INTRODUCTION
Spoken dialog systems allow a user to achieve a task, such as finding a restaurant, using natural language. Before being deployed, most dialog systems are trained for well-defined and static domains such as this. However applications where the domain may grow and changeover time are of particular interest, especially considering the desire for machines which can speak on any topic at web-scale. One key issue in allowing for expanding domains is designing systems which can estimate the state of the conversation, as the set of possible states grows with the domain.
This paper presents how recurrent neural networks (RNNs) can be effectively applied to the task of dialog state tracking in expanding domains. Dialog state tracking has been brought into focus recently with the first and second Dialog State Tracking Challenges (DSTCs). The approach presented in this paper is evaluated in the third DSTC, which focussed on the problem of state tracking in an extended domain, and is outperforms other approaches in tracking the user's goal.
Models which can adapt and improve with minimal labelling once they are deployed and exposed to dialogs in new domains are of particular interest. This is possible in dialog, as a system maybe able to make inferences over sequences of observations, such as learning from user's clarifications. As a step in this direction, experiments are presented in adapting the neural network parameters online with no labels.
Several successful approaches for dialog state tracking have been entered and evaluated in the first two DSTCs, including maximum entropy models, web-style ranking, neural networks, robust hand-crafted rules, and conditional random fields. The RNN framework presented here and originally in provides a natural model for discriminatively learning over dialog sequences. The model is able to deal with simple but high-dimensional representations of dialog turns, requiring very little feature engineering. In particular the RNN framework allows for word-based state tracking, omitting the need for any intermediate semantic representation, which could be a further barrier to dialog in expanding domains.
section: RECURRENT NEURAL NETWORKS FOR DIALOG STATE TRACKING
A key component of the state of a dialog as it is formulated in the Dialog State Tracking Challenge is the user's goal. This is a mapping of slots to values and represents what constraints the user has given in the conversation so far. This section presents how the goal is tracked throughout the course of a dialog, using the recurrent neural network (RNN) framework described in.
section: Feature Representation of the Dialog Sequence
The first stage of the RNN approach consists of converting the input information into the features used by the model. The input components of each dialog turn are the system action and the user input (from a speech recogniser and/or a spoken language understanding system). System actions and any spoken language hypotheses typically use some kind of meaning representation, which will be called a dialog act.
In the dialog state tracking challenge the dialog acts consist of a list of sub acts-each with an act-type and an optional slot, value assignment. An example is hello() | inform(area=centre) (Hi I'm looking for something central.), where the act-types are hello and inform. The dialog act features are obtained as a vector by expanding into n-grams. This example generates the n-grams hello, inform, area, center, inform+area, area+centre, and inform+area+centre.
Hypotheses from the automatic speech recognition (ASR) are converted to n-gram features for n = 1, 2, 3, following. The set of hypotheses from the speech recogniser fora turn is represented as one vector by summing the individual vectors for each hypothesis, weighted by their probabilities. The set of spoken language understanding hypotheses is represented in the same way.
section: Delexicalised Features
Concatenating the vectors for the machine action and the user input gives a vector f which represents the turn. The RNN takes this f as input at each turn, and outputs a sequence of distributions over values for each slot. In order to allow for generalization to values and slots which are not seen in the training data, the approach taken here is to factor the neural network structure so that it operates on delexicalised features.
Delexicalised features are n-gram features where references to a particular slot or value have been replaced with a generic symbol. The procedure for creating the delexicalised vectors f sand f v is illustrated in. For example the delexicalised vector representations of the utterance "Jamaican food" for s=food and v=jamaican are very similar to those of "The Girton area" for s=area and v=girton. Therefore using these features as input allows the model to transfer learning from one case to the other, and achieve applicability to new slots and values.
To start tracking anew slot, it is only necessary to provide text forms for the slot name and its possible values for delexicalisation. The RNN structure described in the following section, after being trained on slots for which we have data, can then be applied to the new slot.
section: Network Structure
One RNN is used to track each slot, outputting a distribution p overall possible values, including a probability that the slot has not been mentioned yet. The memory state m and output pare updated tom and p respectively according to the recurrent structure shown in.
For each value v a scalar g v is given by: where N is the number of values for the slot s, and ⊕ denotes vector concatenation. p N is the probability assigned to the hypothesis that no value has been mentioned for s. The NNet() notation denotes a neural network with one hidden layer, which is then expanded in the final RNN structure. These scalars are then passed into a softmax to give the output distribution p :
where B is a parameter of the RNN.
Here we do not include the component h described in which adjusts g and is computed directly from f ⊕ p ⊕ m. Since the parameters which h introduces are dependent on the number of possible values for the slot, N , omitting h reduces the dependence of the model on the ontology, and allows the model to be applied to any slot. In fact, as no particular assumption is made about the number of the possible values for the slot, the set of possible values can be dynamic by assuming p v = 0 for values v with f v = 0.
Finally the memory m evolves in a standard manner,
For training, the entire RNN is unravelled across all turns in a dialog sequence, expanding the NNet() components. Back-propagation is then used to minimise the log-probability of the training sequences in stochastic gradient descent.
section: ONLINE UNSUPERVISED ADAPTATION
This section presents an approach to adapt the RNN parameters in a live dialog system, without explicit labels, when  deployed in anew domain. This is applied to trackers which work directly on the words from the speech recognition, with the hope that they might adapt to the language used to express constraints on the slots in the new domain.
Relevant fields in machine learning include semi-supervised learning, which attempts to learn from unlabelled indomain data, and transfer learning, which tries to exploit labelled out-of-domain examples. The techniques presented in those fields are typically designed for static classification tasks. The approach defined here however exploits specific patterns of dialog sequences and is formulated specifically for use in live dialog state tracking.
In this context, models are initialised with a set of parameters W init , and adaptation is the process of updating the parameters W having observed dialogs in the new domain. In online adaptation, W maybe updated after each dialog, but the parameters may not be updated using any data from any dialog before the RNN has output its distributions for that dialog.
Let ft denote the input features to the RNN at turn t, and define F as the sequence of inputs fora dialog: F = (f 0 , . . . , f T −1 ) where T is the length of the dialog. An RNN of a given topology can be considered as a function which takes a set of values for the weight and bias parameters, W , and maps F to a sequence of distributions over the labels, Y = (y 0 , . . . , y T −1 ). In particular, for the set of initial parameters W init ,
Unsupervised adaptation is facilitated by defining a scoring criterion which evaluates the adapted parameters W without requiring any labels.
section: Criterion for Unsupervised Adaptation
The proposed criterion C (W ) used to score a set of parameters W , without requiring labels is defined as follows:
where H(y) is the entropy of the distribution y and H(y, y ) = − i y i log(y i ) is the cross-entropy between y and y . Wis the norm of the the parameters W , e.g. the l2 or l1 norm.
The regularisation term multiplying λ > 0 enforces that W should stay close to W init . In the sum, the only terms that change with Ware the cross-entropies H(y t
section: Dialog Turn y init Notes
System: What type of food would you like? User: Chinese food.
section: Chinese
Here an initial model is likely to output a confident low entropy distribution correctly identifying the food goal as 'Chinese'.
System: There are no matching Chinese restaurants.
User: Any serving pizza?
The system has requested the food slot, and the user's response included the term 'serving'. This gives evidence that the user has informed the food slot, but the system cannot recognise which food type is correct. Therefore it is likely that an initial model would output a high entropy distribution for the food slot.
section: System: Sorry, what type of food would you like?
User: Um, Italian food.
section: Italian
If the user explicitly says 'Italian', which the system is able to match in its ontology, then an initial model can predict with high confidence the correct value is food.. Example dialog where user guidance can be exploited in unsupervised learning. The entropy of the food slot is high in the second turn, and low in the third peaking at 'Italian'. Therefore minimising C (equation 1) leads to a learning signal which correlates the n-grams in the second turn ('Something serving pizza') with the 'Italian' hypothesis for food. The low entropy of the slot in the first turn causes the corresponding term in C to diminish, so the signal does not lead to a correlation with the n-grams in the first turn.
section: Schedule for Online Adaptation
The following procedure performs online adaptation of the parameters while classifying a set of dialogs. This is used for  tracking dialogs in the DSTC, and could also be used in a live system. It works by collecting dialogs in batches of size N , and updating the parameters using these batches.
section: RESULTS IN THE THIRD DIALOG STATE TRACKING CHALLENGE
The third Dialog State Tracking Challenge (DSTC3) studied the ability of trackers to adapt to an extended domain. Training data was available in a smaller domain concerning restaurant information, while the test data included coffee shops and pubs as well as restaurants. The set of possible values for each slot was different in the test set, which also included extra slots. A summary of the difference between the smaller training domain and extended test domain of DSTC3 is given in table 1. Full details of the data and evaluation are given in. The unlabelled test set for the DSTC3 was released over a one week period, at the end of which 7 different research groups submitted their tracker output for evaluation. This section explains how delexicalised recurrent neural networks were trained for this blind evaluation, and the results are presented. Following the evaluation, the use of unsupervised adaptation was investigated and the results of this subsequent study are presented in section 5.
Two trackers were submitted to DSTC3, one using speech recognition features (ASR) and another using both speech recognition and spoken language understanding features (ASR+SLU). In both cases slot-independent RNNs were trained on the labelled data for all slots in the training set. The slot-independent models were used to track the new slots in the extended test domain. For slots which existed in the training set, slot-dependent models were trained by starting from the slot-independent model and continuing training using only the labelled data for that slot. For each of the two trackers, an ensemble of six separate RNNs were trained with varying hyper-parameters 1 , and then combined using score averaging.
Note that systems using only ASR features, also known as word-based trackers, are attractive as they do not require a spoken language understanding system for the new domain. A tracker which uses SLU features leaves open the question of how to design SLU systems for expanding domains, while word-based trackers avoid the need for this and require no intermediate semantic representations.
The challenge also required tracking requested slots and the search method, for which the approach in was used. The performance in the DSTC3 evaluation is presented in table 2, and figure 4 plots the performance relative to the other teams' trackers. These results are identified under 'team3' in the DSTC3 overview paper.
The delexicalised RNNs performed consistently well across all tasks. The ASR+SLU tracker obtained the top accuracies and L2 scores for tracking the joint goal in the challenge. Among the trackers which did not use the SLU, the word-based ASR tracker obtained the top joint goal accuracy.
section: Joint Goals
section: Method
Requested Acc. L2 Acc.. Featured metrics in the third Dialog State Tracking Challenge (DSTC3). The L2 score is the square of the L2 distance between the tracker distribution and the true label (delta distribution), and so a lower score is better. The SLU+ASR and ASR trackers are identified as team3entry0 and team3entry2 respectively in the DSTC3 blind evaluation. The two rows labelled Top competing give the best results from the 6 other teams in the challenge (23 total entries) among trackers which 1 did and 2 did not use SLU features.
section: EVALUATION OF UNSUPERVISED ADAPTATION
This section evaluates the proposed method for online and unsupervised adaptation to extended domains in dialog state tracking. The method is initially validated using data from the second Dialog State Tracking Challenge (DSTC2), emulating an extended domain by removing the labels for the 'food' slot during training. Results on testing in an extended domain are then presented on the DSTC3 data.
section: Adaptation with Missing Labels
Here adaptation is evaluated using data from a single domain. A set of initial trackers is trained without the labels for slot s, which are then adapted to the task of tracking the slot s. Though this is a fairly artificial setup, it may give us some confidence that adaptation will be beneficial during actual deployment in an extended domain (see next section). It is also conceivable that only partially labelled data maybe available in some cases during training.
This study investigates training RNNs for the 'food' slot using only labels for 'area' and 'pricerange' in the DSTC2 training sets. Though the RNNs are never exposed to labels for food, they are used to classify the food goal in the DSTC2 test set. The food slot is chosen as it is an outlier in the ontology; while area and pricerange have cardinalities 5 and 3 respectively, there are 91 possible food types. This contributes to the food slot being the hardest to track -in the DSTC2 evaluation, trackers consistently scored lowest on food of all slots.
An ensemble of six RNNs, with varying hyper-parameters as described in section 4, were trained using ASR features and the labels for area and pricerange. Each of these can immediately be used to track the food slot without any unsupervised adaptation, which is called the Unadapted condition. Each of the six RNNs can also be adapted online during the classification of the test set using the procedure described in section 3, which is called the Adapted condition. illustrates the performance of the six trackers with and without online unsupervised adaptation attest time. In all cases, adaptation improved accuracy on the test set. On average the accuracy improved by 1.4% and in the best case by 3.0%. The L2 score, which measures the quality of the probability scores was on average improved but in certain individual cases the L2 score deteriorated slightly. The two groups of six were combined using score averaging. The combined results also demonstrate a slight improvement using adaptation, with the combined Adapted group giving the best tracking performance. The performance is comparable with many of the entries in DSTC2 including the focus baseline (the strongest baseline), and is achieved without any training labels for the slot.
section: Adaptation to New Domains
This section shows results in applying unsupervised adaptation to the word-based ASR tracker described in section 4.. Goal tracking accuracies on the DSTC3 test set for wordbased RNN trackers, with and without unsupervised adaptation. Accuracy is reported on the Old slots and New slots, i.e. slots found and not found in the training set respectively. The joint goal accuracy is also given. In each condition, a group of six RNNs are trained. Mean accuracies for the group are reported, as well as the accuracies of the groups combined using model averaging. For mean results, bold denotes a difference of over 2 standard errors. and the joint. After combination using score averaging, the top joint goal accuracy of 0.623 among the word-based ASR trackers is obtained by the combined adapted tracker. The resulting L2 score however is 0.587 -comparing this to table 2 it seems there is some trade-off between accuracy and the quality of the scores as probabilities, as measured by the L2 score, when using the unsupervised adaptation.
section: CONCLUSIONS
The RNN framework, when combined with delexicalised feature representations, provides a robust method for dialog state tracking which is able to generalise to unseen slots and values. The RNN tracker built using this approach was found to be one of the most competitive submitted to DSTC3, in particular, it outperformed all of the other systems in the task of tracking the user's goal.
The results of the study performed after the evaluation using unsupervised adaptation suggest that it is possible to exploit unlabelled dialog data to further improve RNN-based models online during deployment.
The methods presented here, when coupled with recent results in policy adaptation, suggest a technique for deploying dialog systems in expanding domains. Future work will evaluate these techniques in a live system, rather than in corpus tasks such as the DSTCs.
